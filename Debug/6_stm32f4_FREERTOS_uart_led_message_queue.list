
6_stm32f4_FREERTOS_uart_led_message_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d0  080085d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d8  080085d8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080085e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001be44  200001e0  080087c0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c024  080087c0  0002c024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b02  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000479d  00000000  00000000  00042d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b20  00000000  00000000  000474b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001918  00000000  00000000  00048fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028215  00000000  00000000  0004a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aeb1  00000000  00000000  00072afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3889  00000000  00000000  0008d9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077e0  00000000  00000000  001712b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008338 	.word	0x08008338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008338 	.word	0x08008338

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	f003 0320 	and.w	r3, r3, #32
 8000506:	2b20      	cmp	r3, #32
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	b2db      	uxtb	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myUARTMutex */
  myUARTMutexHandle = osMutexNew(&myUARTMutex_attributes);
 800053c:	4817      	ldr	r0, [pc, #92]	; (800059c <MX_FREERTOS_Init+0x64>)
 800053e:	f003 ff29 	bl	8004394 <osMutexNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_FREERTOS_Init+0x68>)
 8000546:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <MX_FREERTOS_Init+0x6c>)
 800054a:	2101      	movs	r1, #1
 800054c:	2001      	movs	r0, #1
 800054e:	f003 ffbb 	bl	80044c8 <osSemaphoreNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_FREERTOS_Init+0x70>)
 8000556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  //mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(MSGQUEUE_OBJ_t), NULL);

  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint8_t), NULL);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	20c8      	movs	r0, #200	; 0xc8
 800055e:	f004 f8b7 	bl	80046d0 <osMessageQueueNew>
 8000562:	4602      	mov	r2, r0
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_FREERTOS_Init+0x74>)
 8000566:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <MX_FREERTOS_Init+0x78>)
 800056a:	2100      	movs	r1, #0
 800056c:	4811      	ldr	r0, [pc, #68]	; (80005b4 <MX_FREERTOS_Init+0x7c>)
 800056e:	f003 fe37 	bl	80041e0 <osThreadNew>
 8000572:	4602      	mov	r2, r0
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_FREERTOS_Init+0x80>)
 8000576:	601a      	str	r2, [r3, #0]

  /* creation of Green_LED */
  Green_LEDHandle = osThreadNew(Green_LED_task, NULL, &Green_LED_attributes);
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_FREERTOS_Init+0x84>)
 800057a:	2100      	movs	r1, #0
 800057c:	4810      	ldr	r0, [pc, #64]	; (80005c0 <MX_FREERTOS_Init+0x88>)
 800057e:	f003 fe2f 	bl	80041e0 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_FREERTOS_Init+0x8c>)
 8000586:	601a      	str	r2, [r3, #0]

  /* creation of Red_LED */
  Red_LEDHandle = osThreadNew(Red_LED_task, NULL, &Red_LED_attributes);
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <MX_FREERTOS_Init+0x90>)
 800058a:	2100      	movs	r1, #0
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <MX_FREERTOS_Init+0x94>)
 800058e:	f003 fe27 	bl	80041e0 <osThreadNew>
 8000592:	4602      	mov	r2, r0
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_FREERTOS_Init+0x98>)
 8000596:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	08008428 	.word	0x08008428
 80005a0:	2001be94 	.word	0x2001be94
 80005a4:	08008438 	.word	0x08008438
 80005a8:	2001bea0 	.word	0x2001bea0
 80005ac:	2001be98 	.word	0x2001be98
 80005b0:	080083bc 	.word	0x080083bc
 80005b4:	080005d5 	.word	0x080005d5
 80005b8:	2001be90 	.word	0x2001be90
 80005bc:	080083e0 	.word	0x080083e0
 80005c0:	08000629 	.word	0x08000629
 80005c4:	2001bea4 	.word	0x2001bea4
 80005c8:	08008404 	.word	0x08008404
 80005cc:	08000639 	.word	0x08000639
 80005d0:	2001be9c 	.word	0x2001be9c

080005d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <StartDefaultTask+0x48>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f80d 	bl	8004604 <osSemaphoreAcquire>
	  osDelay(20);
 80005ea:	2014      	movs	r0, #20
 80005ec:	f003 fea4 	bl	8004338 <osDelay>
	  if(GPIOA->IDR & 1<<0) {
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <StartDefaultTask+0x4c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <StartDefaultTask+0x34>
		  GPIOD->ODR ^= (1 << 15);
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <StartDefaultTask+0x50>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a08      	ldr	r2, [pc, #32]	; (8000624 <StartDefaultTask+0x50>)
 8000602:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000606:	6153      	str	r3, [r2, #20]
	  }
	  osDelay(20);
 8000608:	2014      	movs	r0, #20
 800060a:	f003 fe95 	bl	8004338 <osDelay>
	  osSemaphoreAcquire(myBinarySem01Handle, 10);
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <StartDefaultTask+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	210a      	movs	r1, #10
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fff5 	bl	8004604 <osSemaphoreAcquire>
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800061a:	e7df      	b.n	80005dc <StartDefaultTask+0x8>
 800061c:	2001bea0 	.word	0x2001bea0
 8000620:	40020000 	.word	0x40020000
 8000624:	40020c00 	.word	0x40020c00

08000628 <Green_LED_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Green_LED_task */
void Green_LED_task(void *argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

 /** MSGQUEUE_OBJ_t msg; **/

  for(;;)
  {
	  osDelay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f003 fe81 	bl	8004338 <osDelay>
 8000636:	e7fb      	b.n	8000630 <Green_LED_task+0x8>

08000638 <Red_LED_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Red_LED_task */
void Red_LED_task(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Red_LED_task */
  /* Infinite loop */

  char rx_data[2];
  rx_data[1] = '\0';
 8000640:	2300      	movs	r3, #0
 8000642:	777b      	strb	r3, [r7, #29]
  char rx_buf[20];

  memset(rx_buf, 0, sizeof(rx_buf));
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f007 f98a 	bl	8007966 <memset>


	///osMutexAcquire(myUARTMutexHandle, osWaitForever);
	//osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);

	      if (osMessageQueueGet(mid_MsgQueue, &rx_data[0], NULL, 0U) == osOK) {
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <Red_LED_task+0xb8>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	f107 011c 	add.w	r1, r7, #28
 800065a:	2300      	movs	r3, #0
 800065c:	2200      	movs	r2, #0
 800065e:	f004 f931 	bl	80048c4 <osMessageQueueGet>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <Red_LED_task+0x1a>
	    	   strcat(rx_buf, rx_data);
 8000668:	f107 021c 	add.w	r2, r7, #28
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f007 f9e4 	bl	8007a40 <strcat>
	    	   if(strstr(rx_buf, "\n") != 0)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	210a      	movs	r1, #10
 800067e:	4618      	mov	r0, r3
 8000680:	f007 f9ed 	bl	8007a5e <strchr>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0e3      	beq.n	8000652 <Red_LED_task+0x1a>
	    	   {
	    		   strupr(rx_buf);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fa0c 	bl	8007aac <strupr>

	    		   if(strstr(rx_buf, "ON") != 0) {
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4916      	ldr	r1, [pc, #88]	; (80006f4 <Red_LED_task+0xbc>)
 800069a:	4618      	mov	r0, r3
 800069c:	f007 f9ec 	bl	8007a78 <strstr>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00c      	beq.n	80006c0 <Red_LED_task+0x88>
	    			   GPIOD->ODR |= (1 << 12);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <Red_LED_task+0xc0>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <Red_LED_task+0xc0>)
 80006ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b0:	6153      	str	r3, [r2, #20]
	    			   memset(rx_buf, 0, sizeof(rx_buf));
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 f953 	bl	8007966 <memset>
	    		   }

	    		   if(strstr(rx_buf, "OFF") != 0) {
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	490d      	ldr	r1, [pc, #52]	; (80006fc <Red_LED_task+0xc4>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f007 f9d6 	bl	8007a78 <strstr>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0bf      	beq.n	8000652 <Red_LED_task+0x1a>
	    			   GPIOD->ODR &= ~(1 << 12);
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <Red_LED_task+0xc0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <Red_LED_task+0xc0>)
 80006d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006dc:	6153      	str	r3, [r2, #20]
	    			   memset(rx_buf, 0, sizeof(rx_buf));
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2214      	movs	r2, #20
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 f93d 	bl	8007966 <memset>
	      if (osMessageQueueGet(mid_MsgQueue, &rx_data[0], NULL, 0U) == osOK) {
 80006ec:	e7b1      	b.n	8000652 <Red_LED_task+0x1a>
 80006ee:	bf00      	nop
 80006f0:	2001be98 	.word	0x2001be98
 80006f4:	0800838c 	.word	0x0800838c
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	08008390 	.word	0x08008390

08000700 <USART2_IRQHandler>:
/* USER CODE BEGIN Application */
     


void USART2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_RXNE(USART2)&& LL_USART_IsEnabledIT_RXNE(USART2))
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <USART2_IRQHandler+0x40>)
 8000708:	f7ff fee2 	bl	80004d0 <LL_USART_IsActiveFlag_RXNE>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d011      	beq.n	8000736 <USART2_IRQHandler+0x36>
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <USART2_IRQHandler+0x40>)
 8000714:	f7ff feef 	bl	80004f6 <LL_USART_IsEnabledIT_RXNE>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00b      	beq.n	8000736 <USART2_IRQHandler+0x36>
	{
		uint8_t bufbyte = LL_USART_ReceiveData8(USART2);
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <USART2_IRQHandler+0x40>)
 8000720:	f7ff fefc 	bl	800051c <LL_USART_ReceiveData8>
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]

		osMessageQueuePut(mid_MsgQueue, &bufbyte, 0U, 0U);
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <USART2_IRQHandler+0x44>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	1df9      	adds	r1, r7, #7
 800072e:	2300      	movs	r3, #0
 8000730:	2200      	movs	r2, #0
 8000732:	f004 f853 	bl	80047dc <osMessageQueuePut>
	}
	/* USER CODE END USART1_IRQn 2 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40004400 	.word	0x40004400
 8000744:	2001be98 	.word	0x2001be98

08000748 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b84      	ldr	r3, [pc, #528]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a83      	ldr	r2, [pc, #524]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b81      	ldr	r3, [pc, #516]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b7d      	ldr	r3, [pc, #500]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7c      	ldr	r2, [pc, #496]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b7a      	ldr	r3, [pc, #488]	; (8000974 <MX_GPIO_Init+0x22c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <MX_GPIO_Init+0x22c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a75      	ldr	r2, [pc, #468]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b73      	ldr	r3, [pc, #460]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a6e      	ldr	r2, [pc, #440]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b68      	ldr	r3, [pc, #416]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a67      	ldr	r2, [pc, #412]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b65      	ldr	r3, [pc, #404]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a60      	ldr	r2, [pc, #384]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <MX_GPIO_Init+0x22c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	485b      	ldr	r0, [pc, #364]	; (8000978 <MX_GPIO_Init+0x230>)
 800080c:	f001 f8e2 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	4859      	ldr	r0, [pc, #356]	; (800097c <MX_GPIO_Init+0x234>)
 8000816:	f001 f8dd 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800081a:	2200      	movs	r2, #0
 800081c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000820:	4857      	ldr	r0, [pc, #348]	; (8000980 <MX_GPIO_Init+0x238>)
 8000822:	f001 f8d7 	bl	80019d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	484e      	ldr	r0, [pc, #312]	; (8000978 <MX_GPIO_Init+0x230>)
 800083e:	f000 ff2f 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4848      	ldr	r0, [pc, #288]	; (800097c <MX_GPIO_Init+0x234>)
 800085a:	f000 ff21 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4840      	ldr	r0, [pc, #256]	; (800097c <MX_GPIO_Init+0x234>)
 800087a:	f000 ff11 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	483d      	ldr	r0, [pc, #244]	; (8000988 <MX_GPIO_Init+0x240>)
 8000892:	f000 ff05 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000896:	2304      	movs	r3, #4
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4838      	ldr	r0, [pc, #224]	; (800098c <MX_GPIO_Init+0x244>)
 80008aa:	f000 fef9 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c0:	2305      	movs	r3, #5
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4830      	ldr	r0, [pc, #192]	; (800098c <MX_GPIO_Init+0x244>)
 80008cc:	f000 fee8 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4825      	ldr	r0, [pc, #148]	; (8000980 <MX_GPIO_Init+0x238>)
 80008ea:	f000 fed9 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x240>)
 8000904:	f000 fecc 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000908:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091a:	230a      	movs	r3, #10
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_GPIO_Init+0x240>)
 8000926:	f000 febb 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4810      	ldr	r0, [pc, #64]	; (8000980 <MX_GPIO_Init+0x238>)
 800093e:	f000 feaf 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_GPIO_Init+0x248>)
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_GPIO_Init+0x230>)
 8000956:	f000 fea3 	bl	80016a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2006      	movs	r0, #6
 8000960:	f000 fe74 	bl	800164c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000964:	2006      	movs	r0, #6
 8000966:	f000 fe8d 	bl	8001684 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	10110000 	.word	0x10110000
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400
 8000990:	10120000 	.word	0x10120000

08000994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_I2C1_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_I2C1_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_I2C1_Init+0x50>)
 80009d2:	f001 f83d 	bl	8001a50 <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 f9ae 	bl	8000d3c <Error_Handler>
  }

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2001bea8 	.word	0x2001bea8
 80009e8:	40005400 	.word	0x40005400
 80009ec:	000186a0 	.word	0x000186a0

080009f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12c      	bne.n	8000a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_I2C_MspInit+0x8c>)
 8000a4c:	f000 fe28 	bl	80016a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000a86:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <MX_I2S3_Init+0x58>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a90:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <MX_I2S3_Init+0x5c>)
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2S3_Init+0x54>)
 8000ac0:	f001 f8fe 	bl	8001cc0 <HAL_I2S_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000aca:	f000 f937 	bl	8000d3c <Error_Handler>
  }

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2001befc 	.word	0x2001befc
 8000ad8:	40003c00 	.word	0x40003c00
 8000adc:	00017700 	.word	0x00017700

08000ae0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <HAL_I2S_MspInit+0xc0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d14a      	bne.n	8000b98 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_I2S_MspInit+0xc4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b56:	2310      	movs	r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b66:	2306      	movs	r3, #6
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <HAL_I2S_MspInit+0xc8>)
 8000b72:	f000 fd95 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b88:	2306      	movs	r3, #6
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_I2S_MspInit+0xcc>)
 8000b94:	f000 fd84 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40003c00 	.word	0x40003c00
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020800 	.word	0x40020800

08000bb0 <LL_USART_EnableIT_RXNE>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f043 0220 	orr.w	r2, r3, #32
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	60da      	str	r2, [r3, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fc40 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f81c 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f7ff fdb4 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be0:	f7ff fed8 	bl	8000994 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000be4:	f7ff ff4c 	bl	8000a80 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000be8:	f000 f8b0 	bl	8000d4c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000bec:	f000 fbaa 	bl	8001344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <main+0x3c>)
 8000bf2:	f7ff ffdd 	bl	8000bb0 <LL_USART_EnableIT_RXNE>
  printf("OS INITIALIZING\n");
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <main+0x40>)
 8000bf8:	f006 ff1a 	bl	8007a30 <puts>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000bfc:	f003 fa88 	bl	8004110 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000c00:	f7ff fc9a 	bl	8000538 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8000c04:	f003 fab8 	bl	8004178 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <main+0x38>
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	08008394 	.word	0x08008394

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b098      	sub	sp, #96	; 0x60
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c1e:	2230      	movs	r2, #48	; 0x30
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 fe9f 	bl	8007966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <SystemClock_Config+0xfc>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <SystemClock_Config+0xfc>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <SystemClock_Config+0xfc>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <SystemClock_Config+0x100>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <SystemClock_Config+0x100>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <SystemClock_Config+0x100>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c92:	2308      	movs	r3, #8
 8000c94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c96:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fca9 	bl	8002600 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cb4:	f000 f842 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
 8000cba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 ff02 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ce2:	f000 f82b 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cea:	23c0      	movs	r3, #192	; 0xc0
 8000cec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f902 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d02:	f000 f81b 	bl	8000d3c <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3760      	adds	r7, #96	; 0x60
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fbb7 	bl	800149c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40002000 	.word	0x40002000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <MX_SPI1_Init+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d98:	220a      	movs	r2, #10
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_SPI1_Init+0x64>)
 8000d9e:	f002 f9ed 	bl	800317c <HAL_SPI_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000da8:	f7ff ffc8 	bl	8000d3c <Error_Handler>
  }

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2001bf44 	.word	0x2001bf44
 8000db4:	40013000 	.word	0x40013000

08000db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_SPI_MspInit+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12b      	bne.n	8000e32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e12:	23e0      	movs	r3, #224	; 0xe0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000e2e:	f000 fc37 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_MspInit+0x54>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_MspInit+0x54>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x54>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_MspInit+0x54>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_MspInit+0x54>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_MspInit+0x54>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	210f      	movs	r1, #15
 8000e8a:	f06f 0001 	mvn.w	r0, #1
 8000e8e:	f000 fbdd 	bl	800164c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	202d      	movs	r0, #45	; 0x2d
 8000eb6:	f000 fbc9 	bl	800164c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8000eba:	202d      	movs	r0, #45	; 0x2d
 8000ebc:	f000 fbe2 	bl	8001684 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_InitTick+0xa4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_InitTick+0xa4>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_InitTick+0xa4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000edc:	f107 0210 	add.w	r2, r7, #16
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 ffd8 	bl	8002e9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000eec:	f001 ffc2 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_InitTick+0xa8>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	3b01      	subs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0xac>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_InitTick+0xb0>)
 8000f08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_InitTick+0xac>)
 8000f0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f10:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_InitTick+0xac>)
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_InitTick+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_InitTick+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_InitTick+0xac>)
 8000f26:	f002 f98d 	bl	8003244 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <HAL_InitTick+0xac>)
 8000f32:	f002 f9bc 	bl	80032ae <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3730      	adds	r7, #48	; 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	2001bf9c 	.word	0x2001bf9c
 8000f50:	40002000 	.word	0x40002000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fd3b 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000f9e:	f002 f9aa 	bl	80032f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2001bf9c 	.word	0x2001bf9c

08000fac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
	}

return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x50>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x16>
		heap_end = &end;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <_sbrk+0x50>)
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <_sbrk+0x54>)
 8001064:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <_sbrk+0x50>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <_sbrk+0x50>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	466a      	mov	r2, sp
 8001076:	4293      	cmp	r3, r2
 8001078:	d907      	bls.n	800108a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800107a:	f006 fc3f 	bl	80078fc <__errno>
 800107e:	4602      	mov	r2, r0
 8001080:	230c      	movs	r3, #12
 8001082:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	e006      	b.n	8001098 <_sbrk+0x48>
	}

	heap_end += incr;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <_sbrk+0x50>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <_sbrk+0x50>)
 8001094:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	2001c028 	.word	0x2001c028

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x28>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x28>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SystemInit+0x28>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c2:	609a      	str	r2, [r3, #8]
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_USART_Enable>:
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60da      	str	r2, [r3, #12]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_USART_ConfigAsyncMode>:
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	615a      	str	r2, [r3, #20]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_USART_IsActiveFlag_TXE>:
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	2b80      	cmp	r3, #128	; 0x80
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800128e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800

080012a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800

080012d8 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */
#include <stdio.h>
/* (Re)Define stdio functionality, so printf would output to USART1 */
int __io_putchar(int ch) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 uint8_t c;
 c = ch & 0x00FF;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
 //HAL_UART_Transmit(&huart2, &c[0], 1, 10);

 LL_USART_TransmitData8(USART2, c);
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <__io_putchar+0x30>)
 80012ea:	f7ff ffb5 	bl	8001258 <LL_USART_TransmitData8>

	/* Wait for TXE flag to be raised */
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 80012ee:	bf00      	nop
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <__io_putchar+0x30>)
 80012f2:	f7ff ff9e 	bl	8001232 <LL_USART_IsActiveFlag_TXE>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f9      	beq.n	80012f0 <__io_putchar+0x18>
 return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40004400 	.word	0x40004400

0800130c <_write>:

int _write(int file,char *ptr, int len) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e009      	b.n	8001332 <_write+0x26>
  __io_putchar(*ptr++);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffd6 	bl	80012d8 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf1      	blt.n	800131e <_write+0x12>
 }
 return len;
 800133a:	687b      	ldr	r3, [r7, #4]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800136e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001372:	f7ff ff99 	bl	80012a8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff7e 	bl	8001278 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800137c:	230c      	movs	r3, #12
 800137e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001380:	2302      	movs	r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001390:	2307      	movs	r3, #7
 8001392:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4818      	ldr	r0, [pc, #96]	; (80013fc <MX_USART2_UART_Init+0xb8>)
 800139a:	f002 faab 	bl	80038f4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800139e:	f7ff fe99 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2200      	movs	r2, #0
 80013a6:	2105      	movs	r1, #5
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fee9 	bl	8001180 <NVIC_EncodePriority>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f7ff feba 	bl	800112c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80013b8:	2026      	movs	r0, #38	; 0x26
 80013ba:	f7ff fe99 	bl	80010f0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80013be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013d0:	230c      	movs	r3, #12
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_USART2_UART_Init+0xbc>)
 80013e4:	f002 fe14 	bl	8004010 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0xbc>)
 80013ea:	f7ff ff0c 	bl	8001206 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_USART2_UART_Init+0xbc>)
 80013f0:	f7ff fef9 	bl	80011e6 <LL_USART_Enable>

}
 80013f4:	bf00      	nop
 80013f6:	3738      	adds	r7, #56	; 0x38
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020000 	.word	0x40020000
 8001400:	40004400 	.word	0x40004400

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
  ldr  r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800142a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142e:	f7ff fe3b 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f006 fa69 	bl	8007908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fbcb 	bl	8000bd0 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001440:	080085e0 	.word	0x080085e0
  ldr  r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001448:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800144c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001450:	2001c024 	.word	0x2001c024

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f8d8 	bl	8001636 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fd0a 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fcdc 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	2001bfdc 	.word	0x2001bfdc

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2001bfdc 	.word	0x2001bfdc

080014dc <__NVIC_SetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff4c 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165e:	f7ff ff61 	bl	8001524 <__NVIC_GetPriorityGrouping>
 8001662:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f7ff ffb1 	bl	80015d0 <NVIC_EncodePriority>
 800166e:	4602      	mov	r2, r0
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff80 	bl	800157c <__NVIC_SetPriority>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff54 	bl	8001540 <__NVIC_EnableIRQ>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e16b      	b.n	8001994 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 815a 	bne.w	800198e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d00b      	beq.n	80016fa <HAL_GPIO_Init+0x5a>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ee:	2b11      	cmp	r3, #17
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0xfc>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80b4 	beq.w	800198e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_GPIO_Init+0x308>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_GPIO_Init+0x308>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x308>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_GPIO_Init+0x30c>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <HAL_GPIO_Init+0x310>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02b      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <HAL_GPIO_Init+0x314>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x222>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_GPIO_Init+0x318>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x21e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_GPIO_Init+0x31c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x21a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x320>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x216>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_GPIO_Init+0x324>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x212>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4b      	ldr	r2, [pc, #300]	; (80019c8 <HAL_GPIO_Init+0x328>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x20e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_GPIO_Init+0x32c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x20a>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e00e      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e00a      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d8:	4934      	ldr	r1, [pc, #208]	; (80019ac <HAL_GPIO_Init+0x30c>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_GPIO_Init+0x330>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190a:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <HAL_GPIO_Init+0x330>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_GPIO_Init+0x330>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_GPIO_Init+0x330>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_GPIO_Init+0x330>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_GPIO_Init+0x330>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x330>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_GPIO_Init+0x330>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f ae90 	bls.w	80016bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	3724      	adds	r7, #36	; 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40021c00 	.word	0x40021c00
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f806 	bl	8001a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013c00 	.word	0x40013c00

08001a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e11f      	b.n	8001ca2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe ffba 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab4:	f001 f9de 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a7b      	ldr	r2, [pc, #492]	; (8001cac <HAL_I2C_Init+0x25c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d807      	bhi.n	8001ad4 <HAL_I2C_Init+0x84>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_I2C_Init+0x260>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e006      	b.n	8001ae2 <HAL_I2C_Init+0x92>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_I2C_Init+0x264>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0db      	b.n	8001ca2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_I2C_Init+0x268>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a64      	ldr	r2, [pc, #400]	; (8001cac <HAL_I2C_Init+0x25c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d802      	bhi.n	8001b24 <HAL_I2C_Init+0xd4>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	e009      	b.n	8001b38 <HAL_I2C_Init+0xe8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	4a63      	ldr	r2, [pc, #396]	; (8001cbc <HAL_I2C_Init+0x26c>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4956      	ldr	r1, [pc, #344]	; (8001cac <HAL_I2C_Init+0x25c>)
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d80d      	bhi.n	8001b74 <HAL_I2C_Init+0x124>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e59      	subs	r1, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b66:	3301      	adds	r3, #1
 8001b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	bf38      	it	cc
 8001b70:	2304      	movcc	r3, #4
 8001b72:	e04f      	b.n	8001c14 <HAL_I2C_Init+0x1c4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <HAL_I2C_Init+0x150>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e58      	subs	r0, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e012      	b.n	8001bc6 <HAL_I2C_Init+0x176>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	0099      	lsls	r1, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Init+0x17e>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e022      	b.n	8001c14 <HAL_I2C_Init+0x1c4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_I2C_Init+0x1a4>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e58      	subs	r0, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	440b      	add	r3, r1
 8001be4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	e00f      	b.n	8001c14 <HAL_I2C_Init+0x1c4>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	0099      	lsls	r1, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	6809      	ldr	r1, [r1, #0]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6911      	ldr	r1, [r2, #16]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68d2      	ldr	r2, [r2, #12]
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	000186a0 	.word	0x000186a0
 8001cb0:	001e847f 	.word	0x001e847f
 8001cb4:	003d08ff 	.word	0x003d08ff
 8001cb8:	431bde83 	.word	0x431bde83
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e128      	b.n	8001f24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a90      	ldr	r2, [pc, #576]	; (8001f2c <HAL_I2S_Init+0x26c>)
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fef7 	bl	8000ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d08:	f023 030f 	bic.w	r3, r3, #15
 8001d0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2202      	movs	r2, #2
 8001d14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d060      	beq.n	8001de0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d26:	2310      	movs	r3, #16
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d802      	bhi.n	8001d3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f001 f9c0 	bl	80030c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4e:	d125      	bne.n	8001d9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	3305      	adds	r3, #5
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e01f      	b.n	8001dba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	3305      	adds	r3, #5
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e00e      	b.n	8001dba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	3305      	adds	r3, #5
 8001db8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_I2S_Init+0x270>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	e003      	b.n	8001de8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d902      	bls.n	8001df4 <HAL_I2S_Init+0x134>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2bff      	cmp	r3, #255	; 0xff
 8001df2:	d907      	bls.n	8001e04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e08f      	b.n	8001f24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e22:	f023 030f 	bic.w	r3, r3, #15
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6851      	ldr	r1, [r2, #4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6892      	ldr	r2, [r2, #8]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6992      	ldr	r2, [r2, #24]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d161      	bne.n	8001f14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <HAL_I2S_Init+0x274>)
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2S_Init+0x1a4>
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e62:	e001      	b.n	8001e68 <HAL_I2S_Init+0x1a8>
 8001e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4932      	ldr	r1, [pc, #200]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e70:	428a      	cmp	r2, r1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2S_Init+0x1b8>
 8001e74:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e76:	e001      	b.n	8001e7c <HAL_I2S_Init+0x1bc>
 8001e78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e80:	f023 030f 	bic.w	r3, r3, #15
 8001e84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2S_Init+0x1d4>
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e92:	e001      	b.n	8001e98 <HAL_I2S_Init+0x1d8>
 8001e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e98:	2202      	movs	r2, #2
 8001e9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2S_Init+0x1ea>
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001ea8:	e001      	b.n	8001eae <HAL_I2S_Init+0x1ee>
 8001eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eba:	d003      	beq.n	8001ec4 <HAL_I2S_Init+0x204>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e001      	b.n	8001ed0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	430b      	orrs	r3, r1
 8001eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001efc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_I2S_Init+0x24c>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001f0a:	e001      	b.n	8001f10 <HAL_I2S_Init+0x250>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f10:	897a      	ldrh	r2, [r7, #10]
 8001f12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	08002037 	.word	0x08002037
 8001f30:	cccccccd 	.word	0xcccccccd
 8001f34:	0800214d 	.word	0x0800214d
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	40003400 	.word	0x40003400

08001f40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	1c9a      	adds	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10e      	bne.n	8001fd0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fc0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffb8 	bl	8001f40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	b292      	uxth	r2, r2
 8001fec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	1c9a      	adds	r2, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10e      	bne.n	800202e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800201e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff93 	bl	8001f54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b04      	cmp	r3, #4
 8002050:	d13a      	bne.n	80020c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d109      	bne.n	8002070 <I2S_IRQHandler+0x3a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d102      	bne.n	8002070 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffb4 	bl	8001fd8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d126      	bne.n	80020c8 <I2S_IRQHandler+0x92>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b20      	cmp	r3, #32
 8002086:	d11f      	bne.n	80020c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002096:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff50 	bl	8001f68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d136      	bne.n	8002142 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d109      	bne.n	80020f2 <I2S_IRQHandler+0xbc>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d102      	bne.n	80020f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff45 	bl	8001f7c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d122      	bne.n	8002142 <I2S_IRQHandler+0x10c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d11b      	bne.n	8002142 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002118:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff13 	bl	8001f68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4aa2      	ldr	r2, [pc, #648]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002166:	4ba2      	ldr	r3, [pc, #648]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002168:	e001      	b.n	800216e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800216a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a9b      	ldr	r2, [pc, #620]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002184:	4b9a      	ldr	r3, [pc, #616]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002186:	e001      	b.n	800218c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002198:	d004      	beq.n	80021a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8099 	bne.w	80022d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f925 	bl	8002408 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9c8 	bl	8002568 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d13a      	bne.n	8002258 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d035      	beq.n	8002258 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80021f6:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021f8:	e001      	b.n	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80021fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4979      	ldr	r1, [pc, #484]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002206:	428b      	cmp	r3, r1
 8002208:	d101      	bne.n	800220e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800220a:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800220c:	e001      	b.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800220e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002216:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002226:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fe88 	bl	8001f68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b08      	cmp	r3, #8
 8002260:	f040 80be 	bne.w	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80b8 	beq.w	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800227e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800228c:	e001      	b.n	8002292 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800228e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4954      	ldr	r1, [pc, #336]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800229a:	428b      	cmp	r3, r1
 800229c:	d101      	bne.n	80022a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022a0:	e001      	b.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0204 	orr.w	r2, r3, #4
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe4a 	bl	8001f68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022d4:	e084      	b.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d107      	bne.n	80022f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8be 	bl	800246c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8fd 	bl	8002504 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d12f      	bne.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02a      	beq.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800232c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800233a:	e001      	b.n	8002340 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800233c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4929      	ldr	r1, [pc, #164]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002348:	428b      	cmp	r3, r1
 800234a:	d101      	bne.n	8002350 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800234c:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800234e:	e001      	b.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002354:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002358:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fdfa 	bl	8001f68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b08      	cmp	r3, #8
 800237c:	d131      	bne.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02c      	beq.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002394:	e001      	b.n	800239a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4912      	ldr	r1, [pc, #72]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023a2:	428b      	cmp	r3, r1
 80023a4:	d101      	bne.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023a8:	e001      	b.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80023aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f043 0204 	orr.w	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fdc5 	bl	8001f68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023de:	e000      	b.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023e0:	bf00      	nop
}
 80023e2:	bf00      	nop
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40003800 	.word	0x40003800
 80023f0:	40003400 	.word	0x40003400

080023f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c99      	adds	r1, r3, #2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6251      	str	r1, [r2, #36]	; 0x24
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d113      	bne.n	8002462 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002448:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffc9 	bl	80023f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	1c99      	adds	r1, r3, #2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6251      	str	r1, [r2, #36]	; 0x24
 800247e:	8819      	ldrh	r1, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <I2SEx_TxISR_I2SExt+0x90>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <I2SEx_TxISR_I2SExt+0x22>
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <I2SEx_TxISR_I2SExt+0x94>)
 800248c:	e001      	b.n	8002492 <I2SEx_TxISR_I2SExt+0x26>
 800248e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002492:	460a      	mov	r2, r1
 8002494:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <I2SEx_TxISR_I2SExt+0x90>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <I2SEx_TxISR_I2SExt+0x50>
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <I2SEx_TxISR_I2SExt+0x94>)
 80024ba:	e001      	b.n	80024c0 <I2SEx_TxISR_I2SExt+0x54>
 80024bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	490d      	ldr	r1, [pc, #52]	; (80024fc <I2SEx_TxISR_I2SExt+0x90>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d101      	bne.n	80024d0 <I2SEx_TxISR_I2SExt+0x64>
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <I2SEx_TxISR_I2SExt+0x94>)
 80024ce:	e001      	b.n	80024d4 <I2SEx_TxISR_I2SExt+0x68>
 80024d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff81 	bl	80023f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40003800 	.word	0x40003800
 8002500:	40003400 	.word	0x40003400

08002504 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d8      	ldr	r0, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	1c99      	adds	r1, r3, #2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800251c:	b282      	uxth	r2, r0
 800251e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d113      	bne.n	8002560 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002546:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff4a 	bl	80023f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <I2SEx_RxISR_I2SExt+0x90>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <I2SEx_RxISR_I2SExt+0x16>
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <I2SEx_RxISR_I2SExt+0x94>)
 800257c:	e001      	b.n	8002582 <I2SEx_RxISR_I2SExt+0x1a>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002582:	68d8      	ldr	r0, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	1c99      	adds	r1, r3, #2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800258e:	b282      	uxth	r2, r0
 8002590:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d121      	bne.n	80025ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <I2SEx_RxISR_I2SExt+0x90>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <I2SEx_RxISR_I2SExt+0x50>
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <I2SEx_RxISR_I2SExt+0x94>)
 80025b6:	e001      	b.n	80025bc <I2SEx_RxISR_I2SExt+0x54>
 80025b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <I2SEx_RxISR_I2SExt+0x90>)
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d101      	bne.n	80025cc <I2SEx_RxISR_I2SExt+0x64>
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <I2SEx_RxISR_I2SExt+0x94>)
 80025ca:	e001      	b.n	80025d0 <I2SEx_RxISR_I2SExt+0x68>
 80025cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff03 	bl	80023f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40003800 	.word	0x40003800
 80025fc:	40003400 	.word	0x40003400

08002600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e25b      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d075      	beq.n	800270a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261e:	4ba3      	ldr	r3, [pc, #652]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	2b08      	cmp	r3, #8
 8002634:	d112      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b9d      	ldr	r3, [pc, #628]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b99      	ldr	r3, [pc, #612]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05b      	beq.n	8002708 <HAL_RCC_OscConfig+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d157      	bne.n	8002708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e236      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x74>
 8002666:	4b91      	ldr	r3, [pc, #580]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a90      	ldr	r2, [pc, #576]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x98>
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a8a      	ldr	r2, [pc, #552]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a87      	ldr	r2, [pc, #540]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002698:	4b84      	ldr	r3, [pc, #528]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a83      	ldr	r2, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a80      	ldr	r2, [pc, #512]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe ff04 	bl	80014c4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe ff00 	bl	80014c4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1fb      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xc0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fef0 	bl	80014c4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe feec 	bl	80014c4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1e7      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0xe8>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002716:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1bb      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4952      	ldr	r1, [pc, #328]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <HAL_RCC_OscConfig+0x2b0>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fea5 	bl	80014c4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe fea1 	bl	80014c4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e19c      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4940      	ldr	r1, [pc, #256]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_RCC_OscConfig+0x2b0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fe84 	bl	80014c4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c0:	f7fe fe80 	bl	80014c4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e17b      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d030      	beq.n	800284c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_RCC_OscConfig+0x2b4>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fe64 	bl	80014c4 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fe60 	bl	80014c4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e15b      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x200>
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_OscConfig+0x2b4>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe fe4d 	bl	80014c4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7fe fe49 	bl	80014c4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e144      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a0 	beq.w	800299a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_RCC_OscConfig+0x2ac>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x2b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d121      	bne.n	80028da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_RCC_OscConfig+0x2b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_RCC_OscConfig+0x2b8>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe0f 	bl	80014c4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	e011      	b.n	80028ce <HAL_RCC_OscConfig+0x2ce>
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470000 	.word	0x42470000
 80028b4:	42470e80 	.word	0x42470e80
 80028b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fe02 	bl	80014c4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0fd      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_OscConfig+0x4d4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
 80028e2:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a7c      	ldr	r2, [pc, #496]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	e01c      	b.n	800292a <HAL_RCC_OscConfig+0x32a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b77      	ldr	r3, [pc, #476]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a76      	ldr	r2, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	4b74      	ldr	r3, [pc, #464]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a73      	ldr	r2, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	e00b      	b.n	800292a <HAL_RCC_OscConfig+0x32a>
 8002912:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a70      	ldr	r2, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
 800291e:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a6d      	ldr	r2, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fdc7 	bl	80014c4 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe fdc3 	bl	80014c4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0bc      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ee      	beq.n	800293a <HAL_RCC_OscConfig+0x33a>
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe fdb1 	bl	80014c4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fdad 	bl	80014c4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0a6      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298e:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8092 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a4:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d05c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d141      	bne.n	8002a3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_RCC_OscConfig+0x4dc>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe fd81 	bl	80014c4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fd7d 	bl	80014c4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e078      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	019b      	lsls	r3, r3, #6
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4933      	ldr	r1, [pc, #204]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_RCC_OscConfig+0x4dc>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fd56 	bl	80014c4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fd52 	bl	80014c4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04d      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x41c>
 8002a3a:	e045      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_OscConfig+0x4dc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe fd3f 	bl	80014c4 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fd3b 	bl	80014c4 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e036      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x44a>
 8002a68:	e02e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e029      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d115      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470060 	.word	0x42470060

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0cc      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d90c      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d044      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e067      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4934      	ldr	r1, [pc, #208]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fc78 	bl	80014c4 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fc74 	bl	80014c4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e04f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d20c      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f90a 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08008448 	.word	0x08008448
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d007      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x32>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 80b4 	bne.w	8002e40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cda:	60bb      	str	r3, [r7, #8]
       break;
 8002cdc:	e0b3      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ce0:	60bb      	str	r3, [r7, #8]
      break;
 8002ce2:	e0b0      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04a      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	ea03 0501 	and.w	r5, r3, r1
 8002d10:	ea04 0602 	and.w	r6, r4, r2
 8002d14:	4629      	mov	r1, r5
 8002d16:	4632      	mov	r2, r6
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f04f 0400 	mov.w	r4, #0
 8002d20:	0154      	lsls	r4, r2, #5
 8002d22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d26:	014b      	lsls	r3, r1, #5
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	1b49      	subs	r1, r1, r5
 8002d2e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f04f 0400 	mov.w	r4, #0
 8002d3a:	0194      	lsls	r4, r2, #6
 8002d3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d40:	018b      	lsls	r3, r1, #6
 8002d42:	1a5b      	subs	r3, r3, r1
 8002d44:	eb64 0402 	sbc.w	r4, r4, r2
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	00e2      	lsls	r2, r4, #3
 8002d52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d56:	00d9      	lsls	r1, r3, #3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4614      	mov	r4, r2
 8002d5c:	195b      	adds	r3, r3, r5
 8002d5e:	eb44 0406 	adc.w	r4, r4, r6
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	0262      	lsls	r2, r4, #9
 8002d6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d70:	0259      	lsls	r1, r3, #9
 8002d72:	460b      	mov	r3, r1
 8002d74:	4614      	mov	r4, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	4621      	mov	r1, r4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f04f 0400 	mov.w	r4, #0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	f7fd fa24 	bl	80001d0 <__aeabi_uldivmod>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	460c      	mov	r4, r1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e049      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	f04f 0400 	mov.w	r4, #0
 8002d9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	ea03 0501 	and.w	r5, r3, r1
 8002da6:	ea04 0602 	and.w	r6, r4, r2
 8002daa:	4629      	mov	r1, r5
 8002dac:	4632      	mov	r2, r6
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	0154      	lsls	r4, r2, #5
 8002db8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dbc:	014b      	lsls	r3, r1, #5
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	1b49      	subs	r1, r1, r5
 8002dc4:	eb62 0206 	sbc.w	r2, r2, r6
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	0194      	lsls	r4, r2, #6
 8002dd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	1a5b      	subs	r3, r3, r1
 8002dda:	eb64 0402 	sbc.w	r4, r4, r2
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dec:	00d9      	lsls	r1, r3, #3
 8002dee:	460b      	mov	r3, r1
 8002df0:	4614      	mov	r4, r2
 8002df2:	195b      	adds	r3, r3, r5
 8002df4:	eb44 0406 	adc.w	r4, r4, r6
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	02a2      	lsls	r2, r4, #10
 8002e02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e06:	0299      	lsls	r1, r3, #10
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4621      	mov	r1, r4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f04f 0400 	mov.w	r4, #0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4623      	mov	r3, r4
 8002e1a:	f7fd f9d9 	bl	80001d0 <__aeabi_uldivmod>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460c      	mov	r4, r1
 8002e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	60bb      	str	r3, [r7, #8]
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e42:	60bb      	str	r3, [r7, #8]
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	68bb      	ldr	r3, [r7, #8]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0a9b      	lsrs	r3, r3, #10
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	08008458 	.word	0x08008458

08002e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCC_GetClockConfig+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d035      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f28:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe fac9 	bl	80014c4 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f36:	f7fe fac5 	bl	80014c4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b0      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f48:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	019a      	lsls	r2, r3, #6
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	071b      	lsls	r3, r3, #28
 8002f60:	4955      	ldr	r1, [pc, #340]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f68:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe faa9 	bl	80014c4 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f76:	f7fe faa5 	bl	80014c4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e090      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8083 	beq.w	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a43      	ldr	r2, [pc, #268]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fca:	f7fe fa7b 	bl	80014c4 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fe fa77 	bl	80014c4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e062      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	429a      	cmp	r2, r3
 800300c:	d028      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003018:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d114      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fa45 	bl	80014c4 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fa41 	bl	80014c4 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e02a      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306c:	d10d      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800307e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003082:	490d      	ldr	r1, [pc, #52]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003090:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	4905      	ldr	r1, [pc, #20]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	42470068 	.word	0x42470068
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42470e40 	.word	0x42470e40

080030c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d13d      	bne.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d12f      	bne.n	8003156 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030f8:	617b      	str	r3, [r7, #20]
          break;
 80030fa:	e02f      	b.n	800315c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003108:	d108      	bne.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e007      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	617b      	str	r3, [r7, #20]
          break;
 8003154:	e002      	b.n	800315c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
          break;
 800315a:	bf00      	nop
        }
      }
      break;
 800315c:	bf00      	nop
    }
  }
  return frequency;
 800315e:	697b      	ldr	r3, [r7, #20]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40023800 	.word	0x40023800
 8003170:	00bb8000 	.word	0x00bb8000
 8003174:	007a1200 	.word	0x007a1200
 8003178:	00f42400 	.word	0x00f42400

0800317c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e056      	b.n	800323c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fe05 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	ea42 0103 	orr.w	r1, r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	f003 0104 	and.w	r1, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e01d      	b.n	8003292 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f815 	bl	800329a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 f968 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d122      	bne.n	8003352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d11b      	bne.n	8003352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0202 	mvn.w	r2, #2
 8003322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8ee 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 800333e:	e005      	b.n	800334c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f8e0 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8f1 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d122      	bne.n	80033a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d11b      	bne.n	80033a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0204 	mvn.w	r2, #4
 8003376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8c4 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 8003392:	e005      	b.n	80033a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8b6 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8c7 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d122      	bne.n	80033fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11b      	bne.n	80033fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f06f 0208 	mvn.w	r2, #8
 80033ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2204      	movs	r2, #4
 80033d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f89a 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 80033e6:	e005      	b.n	80033f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f88c 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f89d 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d122      	bne.n	800344e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d11b      	bne.n	800344e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0210 	mvn.w	r2, #16
 800341e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2208      	movs	r2, #8
 8003424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f870 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 800343a:	e005      	b.n	8003448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f862 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f873 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10e      	bne.n	800347a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0201 	mvn.w	r2, #1
 8003472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd fc4f 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d10e      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f903 	bl	80036ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d10e      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d107      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f838 	bl	8003542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f06f 0220 	mvn.w	r2, #32
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8cd 	bl	8003698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <TIM_Base_SetConfig+0x114>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d00f      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3d      	ldr	r2, [pc, #244]	; (8003670 <TIM_Base_SetConfig+0x118>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <TIM_Base_SetConfig+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <TIM_Base_SetConfig+0x120>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3a      	ldr	r2, [pc, #232]	; (800367c <TIM_Base_SetConfig+0x124>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2f      	ldr	r2, [pc, #188]	; (800366c <TIM_Base_SetConfig+0x114>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d027      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	; (8003670 <TIM_Base_SetConfig+0x118>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d023      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <TIM_Base_SetConfig+0x11c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <TIM_Base_SetConfig+0x120>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <TIM_Base_SetConfig+0x124>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d017      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <TIM_Base_SetConfig+0x128>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <TIM_Base_SetConfig+0x12c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a26      	ldr	r2, [pc, #152]	; (8003688 <TIM_Base_SetConfig+0x130>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_Base_SetConfig+0x134>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <TIM_Base_SetConfig+0x138>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <TIM_Base_SetConfig+0x13c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0xf8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <TIM_Base_SetConfig+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40010400 	.word	0x40010400
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800
 800368c:	40001800 	.word	0x40001800
 8003690:	40001c00 	.word	0x40001c00
 8003694:	40002000 	.word	0x40002000

08003698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2103      	movs	r1, #3
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	61bb      	str	r3, [r7, #24]
  return result;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800371e:	b480      	push	{r7}
 8003720:	b089      	sub	sp, #36	; 0x24
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, (GPIO_OTYPER_OT_0 << POSITION_VAL(Pin)), (OutputType << POSITION_VAL(Pin)));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	613b      	str	r3, [r7, #16]
  return result;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4619      	mov	r1, r3
 8003744:	2301      	movs	r3, #1
 8003746:	408b      	lsls	r3, r1
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	61bb      	str	r3, [r7, #24]
  return result;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	408b      	lsls	r3, r1
 8003766:	431a      	orrs	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
}
 800376c:	bf00      	nop
 800376e:	3724      	adds	r7, #36	; 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	613b      	str	r3, [r7, #16]
  return result;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2103      	movs	r1, #3
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	61bb      	str	r3, [r7, #24]
  return result;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80037ca:	bf00      	nop
 80037cc:	3724      	adds	r7, #36	; 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b089      	sub	sp, #36	; 0x24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	613b      	str	r3, [r7, #16]
  return result;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2103      	movs	r1, #3
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	61bb      	str	r3, [r7, #24]
  return result;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	60da      	str	r2, [r3, #12]
}
 8003828:	bf00      	nop
 800382a:	3724      	adds	r7, #36	; 0x24
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1a      	ldr	r2, [r3, #32]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	613b      	str	r3, [r7, #16]
  return result;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	210f      	movs	r1, #15
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	401a      	ands	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	61bb      	str	r3, [r7, #24]
  return result;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003892:	b480      	push	{r7}
 8003894:	b089      	sub	sp, #36	; 0x24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	613b      	str	r3, [r7, #16]
  return result;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	210f      	movs	r1, #15
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	61bb      	str	r3, [r7, #24]
  return result;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80038e8:	bf00      	nop
 80038ea:	3724      	adds	r7, #36	; 0x24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	613b      	str	r3, [r7, #16]
  return result;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800391e:	e050      	b.n	80039c2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d042      	beq.n	80039bc <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <LL_GPIO_Init+0x52>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d10d      	bne.n	8003962 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	461a      	mov	r2, r3
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff12 	bl	8003778 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	461a      	mov	r2, r3
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fede 	bl	800371e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	461a      	mov	r2, r3
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff33 	bl	80037d6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d11a      	bne.n	80039ae <LL_GPIO_Init+0xba>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	60bb      	str	r3, [r7, #8]
  return result;
 8003984:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b07      	cmp	r3, #7
 800398e:	d807      	bhi.n	80039a0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	461a      	mov	r2, r3
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff4b 	bl	8003834 <LL_GPIO_SetAFPin_0_7>
 800399e:	e006      	b.n	80039ae <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	461a      	mov	r2, r3
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff72 	bl	8003892 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	69b9      	ldr	r1, [r7, #24]
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fe82 	bl	80036c0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1a7      	bne.n	8003920 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <LL_RCC_GetSysClkSource+0x18>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800

080039f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <LL_RCC_GetAHBPrescaler+0x18>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <LL_RCC_PLL_GetMainSource+0x18>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <LL_RCC_PLL_GetN+0x18>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40023800 	.word	0x40023800

08003a84 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <LL_RCC_PLL_GetP+0x18>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <LL_RCC_PLL_GetDivider+0x18>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003ac4:	f000 f820 	bl	8003b08 <RCC_GetSystemClockFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f83e 	bl	8003b54 <RCC_GetHCLKClockFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f84c 	bl	8003b80 <RCC_GetPCLK1ClockFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f858 	bl	8003ba8 <RCC_GetPCLK2ClockFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003b12:	f7ff ff63 	bl	80039dc <LL_RCC_GetSysClkSource>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d006      	beq.n	8003b2a <RCC_GetSystemClockFreq+0x22>
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d007      	beq.n	8003b30 <RCC_GetSystemClockFreq+0x28>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <RCC_GetSystemClockFreq+0x44>)
 8003b26:	607b      	str	r3, [r7, #4]
      break;
 8003b28:	e00a      	b.n	8003b40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <RCC_GetSystemClockFreq+0x48>)
 8003b2c:	607b      	str	r3, [r7, #4]
      break;
 8003b2e:	e007      	b.n	8003b40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003b30:	2008      	movs	r0, #8
 8003b32:	f000 f84d 	bl	8003bd0 <RCC_PLL_GetFreqDomain_SYS>
 8003b36:	6078      	str	r0, [r7, #4]
      break;
 8003b38:	e002      	b.n	8003b40 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <RCC_GetSystemClockFreq+0x44>)
 8003b3c:	607b      	str	r3, [r7, #4]
      break;
 8003b3e:	bf00      	nop
  }

  return frequency;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003b5c:	f7ff ff4c 	bl	80039f8 <LL_RCC_GetAHBPrescaler>
 8003b60:	4603      	mov	r3, r0
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <RCC_GetHCLKClockFreq+0x28>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	40d3      	lsrs	r3, r2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08008448 	.word	0x08008448

08003b80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003b88:	f7ff ff44 	bl	8003a14 <LL_RCC_GetAPB1Prescaler>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	461a      	mov	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	40d3      	lsrs	r3, r2
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08008458 	.word	0x08008458

08003ba8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003bb0:	f7ff ff3e 	bl	8003a30 <LL_RCC_GetAPB2Prescaler>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <RCC_GetPCLK2ClockFreq+0x24>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	40d3      	lsrs	r3, r2
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	08008458 	.word	0x08008458

08003bd0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003be4:	f7ff ff32 	bl	8003a4c <LL_RCC_PLL_GetMainSource>
 8003be8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf4:	d003      	beq.n	8003bfe <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003bf6:	e005      	b.n	8003c04 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003bfa:	617b      	str	r3, [r7, #20]
      break;
 8003bfc:	e005      	b.n	8003c0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003c00:	617b      	str	r3, [r7, #20]
      break;
 8003c02:	e002      	b.n	8003c0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003c06:	617b      	str	r3, [r7, #20]
      break;
 8003c08:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d113      	bne.n	8003c38 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003c10:	f7ff ff46 	bl	8003aa0 <LL_RCC_PLL_GetDivider>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fbb3 f4f2 	udiv	r4, r3, r2
 8003c1c:	f7ff ff24 	bl	8003a68 <LL_RCC_PLL_GetN>
 8003c20:	4603      	mov	r3, r0
 8003c22:	fb03 f404 	mul.w	r4, r3, r4
 8003c26:	f7ff ff2d 	bl	8003a84 <LL_RCC_PLL_GetP>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c36:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003c38:	693b      	ldr	r3, [r7, #16]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <LL_USART_IsEnabled>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_USART_SetStopBitsLength>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_USART_SetHWFlowCtrl>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	615a      	str	r2, [r3, #20]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_USART_SetBaudRate>:
{
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd6:	f040 80c1 	bne.w	8003e5c <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	461d      	mov	r5, r3
 8003cde:	f04f 0600 	mov.w	r6, #0
 8003ce2:	46a8      	mov	r8, r5
 8003ce4:	46b1      	mov	r9, r6
 8003ce6:	eb18 0308 	adds.w	r3, r8, r8
 8003cea:	eb49 0409 	adc.w	r4, r9, r9
 8003cee:	4698      	mov	r8, r3
 8003cf0:	46a1      	mov	r9, r4
 8003cf2:	eb18 0805 	adds.w	r8, r8, r5
 8003cf6:	eb49 0906 	adc.w	r9, r9, r6
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d0e:	4688      	mov	r8, r1
 8003d10:	4691      	mov	r9, r2
 8003d12:	eb18 0005 	adds.w	r0, r8, r5
 8003d16:	eb49 0106 	adc.w	r1, r9, r6
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	461d      	mov	r5, r3
 8003d1e:	f04f 0600 	mov.w	r6, #0
 8003d22:	196b      	adds	r3, r5, r5
 8003d24:	eb46 0406 	adc.w	r4, r6, r6
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	f7fc fa50 	bl	80001d0 <__aeabi_uldivmod>
 8003d30:	4603      	mov	r3, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	461a      	mov	r2, r3
 8003d36:	4bb5      	ldr	r3, [pc, #724]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003d38:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	fa1f f883 	uxth.w	r8, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	461d      	mov	r5, r3
 8003d4a:	f04f 0600 	mov.w	r6, #0
 8003d4e:	46a9      	mov	r9, r5
 8003d50:	46b2      	mov	sl, r6
 8003d52:	eb19 0309 	adds.w	r3, r9, r9
 8003d56:	eb4a 040a 	adc.w	r4, sl, sl
 8003d5a:	4699      	mov	r9, r3
 8003d5c:	46a2      	mov	sl, r4
 8003d5e:	eb19 0905 	adds.w	r9, r9, r5
 8003d62:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d7a:	4689      	mov	r9, r1
 8003d7c:	4692      	mov	sl, r2
 8003d7e:	eb19 0005 	adds.w	r0, r9, r5
 8003d82:	eb4a 0106 	adc.w	r1, sl, r6
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	461d      	mov	r5, r3
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	196b      	adds	r3, r5, r5
 8003d90:	eb46 0406 	adc.w	r4, r6, r6
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	f7fc fa1a 	bl	80001d0 <__aeabi_uldivmod>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b9a      	ldr	r3, [pc, #616]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	; 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	; 0x32
 8003db6:	4a95      	ldr	r2, [pc, #596]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4443      	add	r3, r8
 8003dcc:	fa1f f883 	uxth.w	r8, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	f04f 0600 	mov.w	r6, #0
 8003dd8:	46a9      	mov	r9, r5
 8003dda:	46b2      	mov	sl, r6
 8003ddc:	eb19 0309 	adds.w	r3, r9, r9
 8003de0:	eb4a 040a 	adc.w	r4, sl, sl
 8003de4:	4699      	mov	r9, r3
 8003de6:	46a2      	mov	sl, r4
 8003de8:	eb19 0905 	adds.w	r9, r9, r5
 8003dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e04:	4689      	mov	r9, r1
 8003e06:	4692      	mov	sl, r2
 8003e08:	eb19 0005 	adds.w	r0, r9, r5
 8003e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	461d      	mov	r5, r3
 8003e14:	f04f 0600 	mov.w	r6, #0
 8003e18:	196b      	adds	r3, r5, r5
 8003e1a:	eb46 0406 	adc.w	r4, r6, r6
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4623      	mov	r3, r4
 8003e22:	f7fc f9d5 	bl	80001d0 <__aeabi_uldivmod>
 8003e26:	4603      	mov	r3, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b77      	ldr	r3, [pc, #476]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2164      	movs	r1, #100	; 0x64
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a72      	ldr	r2, [pc, #456]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4443      	add	r3, r8
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	e0d2      	b.n	8004002 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	469a      	mov	sl, r3
 8003e60:	f04f 0b00 	mov.w	fp, #0
 8003e64:	46d0      	mov	r8, sl
 8003e66:	46d9      	mov	r9, fp
 8003e68:	eb18 0308 	adds.w	r3, r8, r8
 8003e6c:	eb49 0409 	adc.w	r4, r9, r9
 8003e70:	4698      	mov	r8, r3
 8003e72:	46a1      	mov	r9, r4
 8003e74:	eb18 080a 	adds.w	r8, r8, sl
 8003e78:	eb49 090b 	adc.w	r9, r9, fp
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e90:	4688      	mov	r8, r1
 8003e92:	4691      	mov	r9, r2
 8003e94:	eb1a 0508 	adds.w	r5, sl, r8
 8003e98:	eb4b 0609 	adc.w	r6, fp, r9
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	0094      	lsls	r4, r2, #2
 8003eae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	4631      	mov	r1, r6
 8003ebc:	f7fc f988 	bl	80001d0 <__aeabi_uldivmod>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b51      	ldr	r3, [pc, #324]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	fa1f f883 	uxth.w	r8, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	469b      	mov	fp, r3
 8003eda:	f04f 0c00 	mov.w	ip, #0
 8003ede:	46d9      	mov	r9, fp
 8003ee0:	46e2      	mov	sl, ip
 8003ee2:	eb19 0309 	adds.w	r3, r9, r9
 8003ee6:	eb4a 040a 	adc.w	r4, sl, sl
 8003eea:	4699      	mov	r9, r3
 8003eec:	46a2      	mov	sl, r4
 8003eee:	eb19 090b 	adds.w	r9, r9, fp
 8003ef2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	4692      	mov	sl, r2
 8003f0e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f12:	eb4c 060a 	adc.w	r6, ip, sl
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	f04f 0400 	mov.w	r4, #0
 8003f26:	0094      	lsls	r4, r2, #2
 8003f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f2c:	008b      	lsls	r3, r1, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	4631      	mov	r1, r6
 8003f36:	f7fc f94b 	bl	80001d0 <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003f42:	fba3 1302 	umull	r1, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a2d      	ldr	r2, [pc, #180]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4443      	add	r3, r8
 8003f66:	fa1f f883 	uxth.w	r8, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	469b      	mov	fp, r3
 8003f6e:	f04f 0c00 	mov.w	ip, #0
 8003f72:	46d9      	mov	r9, fp
 8003f74:	46e2      	mov	sl, ip
 8003f76:	eb19 0309 	adds.w	r3, r9, r9
 8003f7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f7e:	4699      	mov	r9, r3
 8003f80:	46a2      	mov	sl, r4
 8003f82:	eb19 090b 	adds.w	r9, r9, fp
 8003f86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f9e:	4689      	mov	r9, r1
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	eb1b 0509 	adds.w	r5, fp, r9
 8003fa6:	eb4c 060a 	adc.w	r6, ip, sl
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	f04f 0400 	mov.w	r4, #0
 8003fba:	0094      	lsls	r4, r2, #2
 8003fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc0:	008b      	lsls	r3, r1, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	4631      	mov	r1, r6
 8003fca:	f7fc f901 	bl	80001d0 <__aeabi_uldivmod>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2164      	movs	r1, #100	; 0x64
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <LL_USART_SetBaudRate+0x34c>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	4443      	add	r3, r8
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe12 	bl	8003c4c <LL_USART_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d15e      	bne.n	80040ec <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004036:	f023 030c 	bic.w	r3, r3, #12
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	6851      	ldr	r1, [r2, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68d2      	ldr	r2, [r2, #12]
 8004042:	4311      	orrs	r1, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	6912      	ldr	r2, [r2, #16]
 8004048:	4311      	orrs	r1, r2
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	6992      	ldr	r2, [r2, #24]
 800404e:	430a      	orrs	r2, r1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fe09 	bl	8003c74 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fe16 	bl	8003c9a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fd22 	bl	8003abc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <LL_USART_Init+0xe8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d102      	bne.n	8004086 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e021      	b.n	80040ca <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <LL_USART_Init+0xec>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d102      	bne.n	8004094 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e01a      	b.n	80040ca <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <LL_USART_Init+0xf0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	e013      	b.n	80040ca <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <LL_USART_Init+0xf4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d102      	bne.n	80040b0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e00c      	b.n	80040ca <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a15      	ldr	r2, [pc, #84]	; (8004108 <LL_USART_Init+0xf8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d102      	bne.n	80040be <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e005      	b.n	80040ca <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a12      	ldr	r2, [pc, #72]	; (800410c <LL_USART_Init+0xfc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fdea 	bl	8003cc0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40004400 	.word	0x40004400
 8004100:	40004800 	.word	0x40004800
 8004104:	40011400 	.word	0x40011400
 8004108:	40004c00 	.word	0x40004c00
 800410c:	40005000 	.word	0x40005000

08004110 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004116:	f3ef 8305 	mrs	r3, IPSR
 800411a:	60bb      	str	r3, [r7, #8]
  return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	607b      	str	r3, [r7, #4]
  return(result);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <osKernelInitialize+0x32>
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <osKernelInitialize+0x64>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004136:	f3ef 8311 	mrs	r3, BASEPRI
 800413a:	603b      	str	r3, [r7, #0]
  return(result);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004142:	f06f 0305 	mvn.w	r3, #5
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e00c      	b.n	8004164 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <osKernelInitialize+0x64>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d105      	bne.n	800415e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <osKernelInitialize+0x64>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e002      	b.n	8004164 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000200 	.word	0x20000200

08004178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417e:	f3ef 8305 	mrs	r3, IPSR
 8004182:	60bb      	str	r3, [r7, #8]
  return(result);
 8004184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418a:	f3ef 8310 	mrs	r3, PRIMASK
 800418e:	607b      	str	r3, [r7, #4]
  return(result);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <osKernelStart+0x32>
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <osKernelStart+0x64>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d109      	bne.n	80041b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800419e:	f3ef 8311 	mrs	r3, BASEPRI
 80041a2:	603b      	str	r3, [r7, #0]
  return(result);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80041aa:	f06f 0305 	mvn.w	r3, #5
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e00e      	b.n	80041d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <osKernelStart+0x64>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d107      	bne.n	80041ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <osKernelStart+0x64>)
 80041bc:	2202      	movs	r2, #2
 80041be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80041c0:	f002 fa6c 	bl	800669c <vTaskStartScheduler>
      stat = osOK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e002      	b.n	80041d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000200 	.word	0x20000200

080041e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b092      	sub	sp, #72	; 0x48
 80041e4:	af04      	add	r7, sp, #16
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f0:	f3ef 8305 	mrs	r3, IPSR
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 8095 	bne.w	8004328 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004202:	623b      	str	r3, [r7, #32]
  return(result);
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 808e 	bne.w	8004328 <osThreadNew+0x148>
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <osThreadNew+0x154>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d106      	bne.n	8004222 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004214:	f3ef 8311 	mrs	r3, BASEPRI
 8004218:	61fb      	str	r3, [r7, #28]
  return(result);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8083 	bne.w	8004328 <osThreadNew+0x148>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d07f      	beq.n	8004328 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8004228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800422e:	2318      	movs	r3, #24
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004232:	2300      	movs	r3, #0
 8004234:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004236:	f107 031b 	add.w	r3, r7, #27
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d045      	beq.n	80042d4 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <osThreadNew+0x76>
        name = attr->name;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <osThreadNew+0x9c>
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b38      	cmp	r3, #56	; 0x38
 800426e:	d805      	bhi.n	800427c <osThreadNew+0x9c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <osThreadNew+0xa0>
        return (NULL);
 800427c:	2300      	movs	r3, #0
 800427e:	e054      	b.n	800432a <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <osThreadNew+0xd6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b5b      	cmp	r3, #91	; 0x5b
 800429e:	d90a      	bls.n	80042b6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <osThreadNew+0xd6>
        mem = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b4:	e010      	b.n	80042d8 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <osThreadNew+0xf8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <osThreadNew+0xf8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <osThreadNew+0xf8>
          mem = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d2:	e001      	b.n	80042d8 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d110      	bne.n	8004300 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042e6:	9202      	str	r2, [sp, #8]
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f002 f809 	bl	800630c <xTaskCreateStatic>
 80042fa:	4603      	mov	r3, r0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e013      	b.n	8004328 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d110      	bne.n	8004328 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	b29a      	uxth	r2, r3
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f002 f850 	bl	80063be <xTaskCreate>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d001      	beq.n	8004328 <osThreadNew+0x148>
          hTask = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004328:	697b      	ldr	r3, [r7, #20]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3738      	adds	r7, #56	; 0x38
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000200 	.word	0x20000200

08004338 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004340:	f3ef 8305 	mrs	r3, IPSR
 8004344:	613b      	str	r3, [r7, #16]
  return(result);
 8004346:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434c:	f3ef 8310 	mrs	r3, PRIMASK
 8004350:	60fb      	str	r3, [r7, #12]
  return(result);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <osDelay+0x34>
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <osDelay+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d109      	bne.n	8004374 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004360:	f3ef 8311 	mrs	r3, BASEPRI
 8004364:	60bb      	str	r3, [r7, #8]
  return(result);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <osDelay+0x3c>
    stat = osErrorISR;
 800436c:	f06f 0305 	mvn.w	r3, #5
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e007      	b.n	8004384 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <osDelay+0x4c>
      vTaskDelay(ticks);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f002 f958 	bl	8006634 <vTaskDelay>
    }
  }

  return (stat);
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000200 	.word	0x20000200

08004394 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a0:	f3ef 8305 	mrs	r3, IPSR
 80043a4:	613b      	str	r3, [r7, #16]
  return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 8085 	bne.w	80044b8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ae:	f3ef 8310 	mrs	r3, PRIMASK
 80043b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d17e      	bne.n	80044b8 <osMutexNew+0x124>
 80043ba:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <osMutexNew+0x130>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d105      	bne.n	80043ce <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043c2:	f3ef 8311 	mrs	r3, BASEPRI
 80043c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d174      	bne.n	80044b8 <osMutexNew+0x124>
    if (attr != NULL) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <osMutexNew+0x48>
      type = attr->attr_bits;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e001      	b.n	80043e0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <osMutexNew+0x5c>
      rmtx = 1U;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e001      	b.n	80043f4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d15c      	bne.n	80044b8 <osMutexNew+0x124>
      mem = -1;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d015      	beq.n	8004436 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <osMutexNew+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b4f      	cmp	r3, #79	; 0x4f
 8004418:	d902      	bls.n	8004420 <osMutexNew+0x8c>
          mem = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e00c      	b.n	800443a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <osMutexNew+0xa6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <osMutexNew+0xa6>
            mem = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e001      	b.n	800443a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d112      	bne.n	8004466 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4619      	mov	r1, r3
 800444c:	2004      	movs	r0, #4
 800444e:	f001 f91b 	bl	8005688 <xQueueCreateMutexStatic>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24
 8004454:	e016      	b.n	8004484 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4619      	mov	r1, r3
 800445c:	2001      	movs	r0, #1
 800445e:	f001 f913 	bl	8005688 <xQueueCreateMutexStatic>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
 8004464:	e00e      	b.n	8004484 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004472:	2004      	movs	r0, #4
 8004474:	f001 f8f0 	bl	8005658 <xQueueCreateMutex>
 8004478:	6278      	str	r0, [r7, #36]	; 0x24
 800447a:	e003      	b.n	8004484 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800447c:	2001      	movs	r0, #1
 800447e:	f001 f8eb 	bl	8005658 <xQueueCreateMutex>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <osMutexNew+0x110>
        if (attr != NULL) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <osMutexNew+0x104>
          name = attr->name;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e001      	b.n	800449c <osMutexNew+0x108>
        } else {
          name = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800449c:	6979      	ldr	r1, [r7, #20]
 800449e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044a0:	f001 feae 	bl	8006200 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <osMutexNew+0x124>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3728      	adds	r7, #40	; 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000200 	.word	0x20000200

080044c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	; 0x30
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d8:	f3ef 8305 	mrs	r3, IPSR
 80044dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80044de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f040 8088 	bne.w	80045f6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ea:	617b      	str	r3, [r7, #20]
  return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 8081 	bne.w	80045f6 <osSemaphoreNew+0x12e>
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <osSemaphoreNew+0x138>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d105      	bne.n	8004508 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004500:	613b      	str	r3, [r7, #16]
  return(result);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d176      	bne.n	80045f6 <osSemaphoreNew+0x12e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d073      	beq.n	80045f6 <osSemaphoreNew+0x12e>
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	429a      	cmp	r2, r3
 8004514:	d86f      	bhi.n	80045f6 <osSemaphoreNew+0x12e>
    mem = -1;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <osSemaphoreNew+0x70>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b4f      	cmp	r3, #79	; 0x4f
 8004530:	d902      	bls.n	8004538 <osSemaphoreNew+0x70>
        mem = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	623b      	str	r3, [r7, #32]
 8004536:	e00c      	b.n	8004552 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <osSemaphoreNew+0x8a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <osSemaphoreNew+0x8a>
          mem = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	e001      	b.n	8004552 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d04d      	beq.n	80045f6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d129      	bne.n	80045b4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10b      	bne.n	800457e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	2303      	movs	r3, #3
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	2200      	movs	r2, #0
 8004572:	2100      	movs	r1, #0
 8004574:	2001      	movs	r0, #1
 8004576:	f000 ff83 	bl	8005480 <xQueueGenericCreateStatic>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24
 800457c:	e005      	b.n	800458a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800457e:	2203      	movs	r2, #3
 8004580:	2100      	movs	r1, #0
 8004582:	2001      	movs	r0, #1
 8004584:	f000 ffee 	bl	8005564 <xQueueGenericCreate>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <osSemaphoreNew+0x10e>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01f      	beq.n	80045d6 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004596:	2300      	movs	r3, #0
 8004598:	2200      	movs	r2, #0
 800459a:	2100      	movs	r1, #0
 800459c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800459e:	f001 f8f5 	bl	800578c <xQueueGenericSend>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d016      	beq.n	80045d6 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 80045a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045aa:	f001 fcde 	bl	8005f6a <vQueueDelete>
            hSemaphore = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e010      	b.n	80045d6 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d108      	bne.n	80045cc <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	461a      	mov	r2, r3
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 f87b 	bl	80056be <xQueueCreateCountingSemaphoreStatic>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24
 80045ca:	e004      	b.n	80045d6 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f001 f8aa 	bl	8005728 <xQueueCreateCountingSemaphore>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <osSemaphoreNew+0x122>
          name = attr->name;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e001      	b.n	80045ee <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f2:	f001 fe05 	bl	8006200 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000200 	.word	0x20000200

08004604 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800461c:	f06f 0303 	mvn.w	r3, #3
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	e04b      	b.n	80046bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004624:	f3ef 8305 	mrs	r3, IPSR
 8004628:	617b      	str	r3, [r7, #20]
  return(result);
 800462a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004630:	f3ef 8310 	mrs	r3, PRIMASK
 8004634:	613b      	str	r3, [r7, #16]
  return(result);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <osSemaphoreAcquire+0x4c>
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <osSemaphoreAcquire+0xc4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d128      	bne.n	8004696 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004644:	f3ef 8311 	mrs	r3, BASEPRI
 8004648:	60fb      	str	r3, [r7, #12]
  return(result);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004656:	f06f 0303 	mvn.w	r3, #3
 800465a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800465c:	e02d      	b.n	80046ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	461a      	mov	r2, r3
 8004668:	2100      	movs	r1, #0
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f001 fc00 	bl	8005e70 <xQueueReceiveFromISR>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d003      	beq.n	800467e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004676:	f06f 0302 	mvn.w	r3, #2
 800467a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800467c:	e01d      	b.n	80046ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01a      	beq.n	80046ba <osSemaphoreAcquire+0xb6>
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <osSemaphoreAcquire+0xc8>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004694:	e011      	b.n	80046ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	69b8      	ldr	r0, [r7, #24]
 800469a:	f001 fae1 	bl	8005c60 <xQueueSemaphoreTake>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d00b      	beq.n	80046bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80046aa:	f06f 0301 	mvn.w	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e004      	b.n	80046bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80046b2:	f06f 0302 	mvn.w	r3, #2
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e000      	b.n	80046bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80046ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80046bc:	69fb      	ldr	r3, [r7, #28]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000200 	.word	0x20000200
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e0:	f3ef 8305 	mrs	r3, IPSR
 80046e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d170      	bne.n	80047ce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ec:	f3ef 8310 	mrs	r3, PRIMASK
 80046f0:	617b      	str	r3, [r7, #20]
  return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d16a      	bne.n	80047ce <osMessageQueueNew+0xfe>
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <osMessageQueueNew+0x108>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d105      	bne.n	800470c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004700:	f3ef 8311 	mrs	r3, BASEPRI
 8004704:	613b      	str	r3, [r7, #16]
  return(result);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d160      	bne.n	80047ce <osMessageQueueNew+0xfe>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d05d      	beq.n	80047ce <osMessageQueueNew+0xfe>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d05a      	beq.n	80047ce <osMessageQueueNew+0xfe>
    mem = -1;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d029      	beq.n	8004778 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d012      	beq.n	8004752 <osMessageQueueNew+0x82>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b4f      	cmp	r3, #79	; 0x4f
 8004732:	d90e      	bls.n	8004752 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <osMessageQueueNew+0x82>
        mem = 1;
 800474c:	2301      	movs	r3, #1
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	e014      	b.n	800477c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d110      	bne.n	800477c <osMessageQueueNew+0xac>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <osMessageQueueNew+0xac>
          mem = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	e001      	b.n	800477c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10c      	bne.n	800479c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6899      	ldr	r1, [r3, #8]
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	460b      	mov	r3, r1
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fe74 	bl	8005480 <xQueueGenericCreateStatic>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
 800479a:	e008      	b.n	80047ae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80047a2:	2200      	movs	r2, #0
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fedc 	bl	8005564 <xQueueGenericCreate>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e001      	b.n	80047c6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ca:	f001 fd19 	bl	8006200 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000200 	.word	0x20000200

080047dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f4:	f3ef 8305 	mrs	r3, IPSR
 80047f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80047fa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8310 	mrs	r3, PRIMASK
 8004804:	61bb      	str	r3, [r7, #24]
  return(result);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <osMessageQueuePut+0x44>
 800480c:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <osMessageQueuePut+0xe0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d12e      	bne.n	8004872 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004814:	f3ef 8311 	mrs	r3, BASEPRI
 8004818:	617b      	str	r3, [r7, #20]
  return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <osMessageQueuePut+0x56>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <osMessageQueuePut+0x56>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004832:	f06f 0303 	mvn.w	r3, #3
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004838:	e039      	b.n	80048ae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800483e:	f107 0210 	add.w	r2, r7, #16
 8004842:	2300      	movs	r3, #0
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	6a38      	ldr	r0, [r7, #32]
 8004848:	f001 f89a 	bl	8005980 <xQueueGenericSendFromISR>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d003      	beq.n	800485a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004852:	f06f 0302 	mvn.w	r3, #2
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004858:	e029      	b.n	80048ae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d026      	beq.n	80048ae <osMessageQueuePut+0xd2>
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <osMessageQueuePut+0xe4>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004870:	e01d      	b.n	80048ae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <osMessageQueuePut+0xa2>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800487e:	f06f 0303 	mvn.w	r3, #3
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	e014      	b.n	80048b0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004886:	2300      	movs	r3, #0
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	6a38      	ldr	r0, [r7, #32]
 800488e:	f000 ff7d 	bl	800578c <xQueueGenericSend>
 8004892:	4603      	mov	r3, r0
 8004894:	2b01      	cmp	r3, #1
 8004896:	d00b      	beq.n	80048b0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800489e:	f06f 0301 	mvn.w	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	e004      	b.n	80048b0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80048a6:	f06f 0302 	mvn.w	r3, #2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	e000      	b.n	80048b0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000200 	.word	0x20000200
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048da:	f3ef 8305 	mrs	r3, IPSR
 80048de:	61fb      	str	r3, [r7, #28]
  return(result);
 80048e0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <osMessageQueueGet+0x42>
 80048f2:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <osMessageQueueGet+0xdc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d12e      	bne.n	8004958 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048fa:	f3ef 8311 	mrs	r3, BASEPRI
 80048fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d028      	beq.n	8004958 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <osMessageQueueGet+0x54>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <osMessageQueueGet+0x54>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004918:	f06f 0303 	mvn.w	r3, #3
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800491e:	e038      	b.n	8004992 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004924:	f107 0310 	add.w	r3, r7, #16
 8004928:	461a      	mov	r2, r3
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	6a38      	ldr	r0, [r7, #32]
 800492e:	f001 fa9f 	bl	8005e70 <xQueueReceiveFromISR>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d003      	beq.n	8004940 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004938:	f06f 0302 	mvn.w	r3, #2
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800493e:	e028      	b.n	8004992 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d025      	beq.n	8004992 <osMessageQueueGet+0xce>
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <osMessageQueueGet+0xe0>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004956:	e01c      	b.n	8004992 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <osMessageQueueGet+0xa0>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004964:	f06f 0303 	mvn.w	r3, #3
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e013      	b.n	8004994 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	6a38      	ldr	r0, [r7, #32]
 8004972:	f001 f899 	bl	8005aa8 <xQueueReceive>
 8004976:	4603      	mov	r3, r0
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00b      	beq.n	8004994 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004982:	f06f 0301 	mvn.w	r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
 8004988:	e004      	b.n	8004994 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800498a:	f06f 0302 	mvn.w	r3, #2
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
 8004990:	e000      	b.n	8004994 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004992:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000200 	.word	0x20000200
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80049b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <vApplicationGetIdleTaskMemory+0x30>)
 80049be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	20000204 	.word	0x20000204
 80049d8:	20000260 	.word	0x20000260

080049dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <vApplicationGetTimerTaskMemory+0x2c>)
 80049ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a06      	ldr	r2, [pc, #24]	; (8004a0c <vApplicationGetTimerTaskMemory+0x30>)
 80049f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20001200 	.word	0x20001200
 8004a0c:	2000125c 	.word	0x2000125c

08004a10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a1c:	f001 fea2 	bl	8006764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a20:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <pvPortMalloc+0x170>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a28:	f000 f90c 	bl	8004c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a2c:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <pvPortMalloc+0x174>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 808c 	bne.w	8004b52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01c      	beq.n	8004a7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004a40:	2208      	movs	r2, #8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	3308      	adds	r3, #8
 8004a5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e7fe      	b.n	8004a78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d068      	beq.n	8004b52 <pvPortMalloc+0x142>
 8004a80:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <pvPortMalloc+0x178>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d863      	bhi.n	8004b52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a8a:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <pvPortMalloc+0x17c>)
 8004a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <pvPortMalloc+0x17c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a94:	e004      	b.n	8004aa0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <pvPortMalloc+0xa2>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f1      	bne.n	8004a96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ab2:	4b33      	ldr	r3, [pc, #204]	; (8004b80 <pvPortMalloc+0x170>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d04a      	beq.n	8004b52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d91e      	bls.n	8004b1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <pvPortMalloc+0xf4>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	e7fe      	b.n	8004b02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b16:	69b8      	ldr	r0, [r7, #24]
 8004b18:	f000 f8f8 	bl	8004d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <pvPortMalloc+0x178>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <pvPortMalloc+0x178>)
 8004b28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <pvPortMalloc+0x178>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <pvPortMalloc+0x180>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d203      	bcs.n	8004b3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <pvPortMalloc+0x178>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <pvPortMalloc+0x180>)
 8004b3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <pvPortMalloc+0x174>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b52:	f001 fe15 	bl	8006780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <pvPortMalloc+0x164>
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e7fe      	b.n	8004b72 <pvPortMalloc+0x162>
	return pvReturn;
 8004b74:	69fb      	ldr	r3, [r7, #28]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	2001b844 	.word	0x2001b844
 8004b84:	2001b850 	.word	0x2001b850
 8004b88:	2001b848 	.word	0x2001b848
 8004b8c:	2001b83c 	.word	0x2001b83c
 8004b90:	2001b84c 	.word	0x2001b84c

08004b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d046      	beq.n	8004c34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	425b      	negs	r3, r3
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <vPortFree+0xa8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <vPortFree+0x42>
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e7fe      	b.n	8004bd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <vPortFree+0x5e>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	e7fe      	b.n	8004bf0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <vPortFree+0xa8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d019      	beq.n	8004c34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <vPortFree+0xa8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c18:	f001 fda4 	bl	8006764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <vPortFree+0xac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4413      	add	r3, r2
 8004c26:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <vPortFree+0xac>)
 8004c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c2a:	6938      	ldr	r0, [r7, #16]
 8004c2c:	f000 f86e 	bl	8004d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c30:	f001 fda6 	bl	8006780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2001b850 	.word	0x2001b850
 8004c40:	2001b848 	.word	0x2001b848

08004c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4a:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <prvHeapInit+0xac>)
 8004c4c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c4e:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <prvHeapInit+0xb0>)
 8004c50:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00c      	beq.n	8004c76 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f023 0307 	bic.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <prvHeapInit+0xb0>)
 8004c72:	4413      	add	r3, r2
 8004c74:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <prvHeapInit+0xb4>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c80:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <prvHeapInit+0xb4>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c8e:	2208      	movs	r2, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 0307 	bic.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <prvHeapInit+0xb8>)
 8004ca2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <prvHeapInit+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <prvHeapInit+0xb8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	1ad2      	subs	r2, r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <prvHeapInit+0xb8>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <prvHeapInit+0xbc>)
 8004cd0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <prvHeapInit+0xc0>)
 8004cd8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <prvHeapInit+0xc4>)
 8004cdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	000186a0 	.word	0x000186a0
 8004cf4:	2000319c 	.word	0x2000319c
 8004cf8:	2001b83c 	.word	0x2001b83c
 8004cfc:	2001b844 	.word	0x2001b844
 8004d00:	2001b84c 	.word	0x2001b84c
 8004d04:	2001b848 	.word	0x2001b848
 8004d08:	2001b850 	.word	0x2001b850

08004d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <prvInsertBlockIntoFreeList+0xac>)
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e002      	b.n	8004d20 <prvInsertBlockIntoFreeList+0x14>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d8f7      	bhi.n	8004d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d108      	bne.n	8004d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	441a      	add	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d118      	bne.n	8004d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <prvInsertBlockIntoFreeList+0xb0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d00d      	beq.n	8004d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e008      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <prvInsertBlockIntoFreeList+0xb0>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e003      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d002      	beq.n	8004daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	2001b83c 	.word	0x2001b83c
 8004dbc:	2001b844 	.word	0x2001b844

08004dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f103 0208 	add.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f103 0208 	add.w	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0208 	add.w	r2, r3, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d103      	bne.n	8004e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e00c      	b.n	8004e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3308      	adds	r3, #8
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e002      	b.n	8004e90 <vListInsert+0x2e>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d2f6      	bcs.n	8004e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6892      	ldr	r2, [r2, #8]
 8004eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6852      	ldr	r2, [r2, #4]
 8004ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d103      	bne.n	8004f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1e5a      	subs	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3b04      	subs	r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <pxPortInitialiseStack+0x64>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b14      	subs	r3, #20
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f06f 0202 	mvn.w	r2, #2
 8004f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b20      	subs	r3, #32
 8004f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	08004f91 	.word	0x08004f91

08004f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <prvTaskExitError+0x50>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d009      	beq.n	8004fb8 <prvTaskExitError+0x28>
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e7fe      	b.n	8004fb6 <prvTaskExitError+0x26>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fca:	bf00      	nop
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0fc      	beq.n	8004fcc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c
	...

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	4770      	bx	lr
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst2>:
 8005010:	2001b85c 	.word	0x2001b85c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <prvPortStartFirstTask+0x24>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8814 	msr	CONTROL, r0
 800502a:	b662      	cpsie	i
 800502c:	b661      	cpsie	f
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	df00      	svc	0
 8005038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800503a:	bf00      	nop
 800503c:	e000ed08 	.word	0xe000ed08

08005040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005046:	4b44      	ldr	r3, [pc, #272]	; (8005158 <xPortStartScheduler+0x118>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a44      	ldr	r2, [pc, #272]	; (800515c <xPortStartScheduler+0x11c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d109      	bne.n	8005064 <xPortStartScheduler+0x24>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e7fe      	b.n	8005062 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005064:	4b3c      	ldr	r3, [pc, #240]	; (8005158 <xPortStartScheduler+0x118>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <xPortStartScheduler+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d109      	bne.n	8005082 <xPortStartScheduler+0x42>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e7fe      	b.n	8005080 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005082:	4b38      	ldr	r3, [pc, #224]	; (8005164 <xPortStartScheduler+0x124>)
 8005084:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <xPortStartScheduler+0x128>)
 80050a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050aa:	4b30      	ldr	r3, [pc, #192]	; (800516c <xPortStartScheduler+0x12c>)
 80050ac:	2207      	movs	r2, #7
 80050ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b0:	e009      	b.n	80050c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <xPortStartScheduler+0x12c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4a2c      	ldr	r2, [pc, #176]	; (800516c <xPortStartScheduler+0x12c>)
 80050ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d0ef      	beq.n	80050b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050d2:	4b26      	ldr	r3, [pc, #152]	; (800516c <xPortStartScheduler+0x12c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1c3 0307 	rsb	r3, r3, #7
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d009      	beq.n	80050f2 <xPortStartScheduler+0xb2>
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	e7fe      	b.n	80050f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <xPortStartScheduler+0x12c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <xPortStartScheduler+0x12c>)
 80050fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <xPortStartScheduler+0x12c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <xPortStartScheduler+0x12c>)
 8005106:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xPortStartScheduler+0x130>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <xPortStartScheduler+0x130>)
 8005116:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800511a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <xPortStartScheduler+0x130>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a13      	ldr	r2, [pc, #76]	; (8005170 <xPortStartScheduler+0x130>)
 8005122:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005126:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005128:	f000 f8d6 	bl	80052d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <xPortStartScheduler+0x134>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005132:	f000 f8f5 	bl	8005320 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <xPortStartScheduler+0x138>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <xPortStartScheduler+0x138>)
 800513c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005140:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005142:	f7ff ff69 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005146:	f001 fc85 	bl	8006a54 <vTaskSwitchContext>
	prvTaskExitError();
 800514a:	f7ff ff21 	bl	8004f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	e000ed00 	.word	0xe000ed00
 800515c:	410fc271 	.word	0x410fc271
 8005160:	410fc270 	.word	0x410fc270
 8005164:	e000e400 	.word	0xe000e400
 8005168:	2001b854 	.word	0x2001b854
 800516c:	2001b858 	.word	0x2001b858
 8005170:	e000ed20 	.word	0xe000ed20
 8005174:	2000000c 	.word	0x2000000c
 8005178:	e000ef34 	.word	0xe000ef34

0800517c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <vPortEnterCritical+0x54>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <vPortEnterCritical+0x54>)
 800519c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <vPortEnterCritical+0x54>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10e      	bne.n	80051c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <vPortEnterCritical+0x58>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <vPortEnterCritical+0x48>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	e7fe      	b.n	80051c2 <vPortEnterCritical+0x46>
	}
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	2000000c 	.word	0x2000000c
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <vPortExitCritical+0x4c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <vPortExitCritical+0x22>
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	e7fe      	b.n	80051f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <vPortExitCritical+0x4c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <vPortExitCritical+0x4c>)
 8005202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <vPortExitCritical+0x4c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <vPortExitCritical+0x3e>
 800520c:	2300      	movs	r3, #0
 800520e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	2000000c 	.word	0x2000000c
	...

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005254:	f380 8811 	msr	BASEPRI, r0
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f001 fbf8 	bl	8006a54 <vTaskSwitchContext>
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f380 8811 	msr	BASEPRI, r0
 800526c:	bc09      	pop	{r0, r3}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005276:	f01e 0f10 	tst.w	lr, #16
 800527a:	bf08      	it	eq
 800527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005280:	f380 8809 	msr	PSP, r0
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst>:
 8005290:	2001b85c 	.word	0x2001b85c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b0:	f001 fb12 	bl	80068d8 <xTaskIncrementTick>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <SysTick_Handler+0x3c>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <vPortSetupTimerInterrupt+0x34>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortSetupTimerInterrupt+0x38>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortSetupTimerInterrupt+0x3c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <vPortSetupTimerInterrupt+0x40>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	4a09      	ldr	r2, [pc, #36]	; (800531c <vPortSetupTimerInterrupt+0x44>)
 80052f6:	3b01      	subs	r3, #1
 80052f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052fa:	4b04      	ldr	r3, [pc, #16]	; (800530c <vPortSetupTimerInterrupt+0x34>)
 80052fc:	2207      	movs	r2, #7
 80052fe:	601a      	str	r2, [r3, #0]
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	e000e010 	.word	0xe000e010
 8005310:	e000e018 	.word	0xe000e018
 8005314:	20000000 	.word	0x20000000
 8005318:	10624dd3 	.word	0x10624dd3
 800531c:	e000e014 	.word	0xe000e014

08005320 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005320:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005330 <vPortEnableVFP+0x10>
 8005324:	6801      	ldr	r1, [r0, #0]
 8005326:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800532a:	6001      	str	r1, [r0, #0]
 800532c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800532e:	bf00      	nop
 8005330:	e000ed88 	.word	0xe000ed88

08005334 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800533a:	f3ef 8305 	mrs	r3, IPSR
 800533e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d913      	bls.n	800536e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <vPortValidateInterruptPriority+0x6c>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <vPortValidateInterruptPriority+0x70>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	7afa      	ldrb	r2, [r7, #11]
 8005356:	429a      	cmp	r2, r3
 8005358:	d209      	bcs.n	800536e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e7fe      	b.n	800536c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <vPortValidateInterruptPriority+0x74>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <vPortValidateInterruptPriority+0x78>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d909      	bls.n	8005392 <vPortValidateInterruptPriority+0x5e>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	e7fe      	b.n	8005390 <vPortValidateInterruptPriority+0x5c>
	}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000e3f0 	.word	0xe000e3f0
 80053a4:	2001b854 	.word	0x2001b854
 80053a8:	e000ed0c 	.word	0xe000ed0c
 80053ac:	2001b858 	.word	0x2001b858

080053b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <xQueueGenericReset+0x28>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	e7fe      	b.n	80053d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80053d8:	f7ff fed0 	bl	800517c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	3b01      	subs	r3, #1
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	22ff      	movs	r2, #255	; 0xff
 800541c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22ff      	movs	r2, #255	; 0xff
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01a      	beq.n	800546c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3310      	adds	r3, #16
 800543a:	4618      	mov	r0, r3
 800543c:	f001 fbb4 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <xQueueGenericReset+0xcc>)
 8005448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	e009      	b.n	800546c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3310      	adds	r3, #16
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fcaf 	bl	8004dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fcaa 	bl	8004dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800546c:	f7ff feb4 	bl	80051d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005470:	2301      	movs	r3, #1
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08e      	sub	sp, #56	; 0x38
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <xQueueGenericCreateStatic+0x28>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <xQueueGenericCreateStatic+0x42>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e7fe      	b.n	80054c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <xQueueGenericCreateStatic+0x4e>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <xQueueGenericCreateStatic+0x52>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericCreateStatic+0x54>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <xQueueGenericCreateStatic+0x6c>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <xQueueGenericCreateStatic+0x78>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xQueueGenericCreateStatic+0x7c>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <xQueueGenericCreateStatic+0x7e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <xQueueGenericCreateStatic+0x96>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005516:	2350      	movs	r3, #80	; 0x50
 8005518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d009      	beq.n	8005534 <xQueueGenericCreateStatic+0xb4>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e7fe      	b.n	8005532 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005546:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f842 	bl	80055de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xQueueGenericCreate+0x28>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e7fe      	b.n	800558a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e004      	b.n	80055a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3350      	adds	r3, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fa32 	bl	8004a10 <pvPortMalloc>
 80055ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00f      	beq.n	80055d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3350      	adds	r3, #80	; 0x50
 80055b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055c2:	79fa      	ldrb	r2, [r7, #7]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f805 	bl	80055de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055d4:	69bb      	ldr	r3, [r7, #24]
	}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e002      	b.n	8005600 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800560c:	2101      	movs	r1, #1
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f7ff fece 	bl	80053b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005644:	2300      	movs	r3, #0
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f89e 	bl	800578c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005662:	2301      	movs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	461a      	mov	r2, r3
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	f7ff ff77 	bl	8005564 <xQueueGenericCreate>
 8005676:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ffd3 	bl	8005624 <prvInitialiseMutex>

		return pxNewQueue;
 800567e:	68fb      	ldr	r3, [r7, #12]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff feea 	bl	8005480 <xQueueGenericCreateStatic>
 80056ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ffb8 	bl	8005624 <prvInitialiseMutex>

		return pxNewQueue;
 80056b4:	68fb      	ldr	r3, [r7, #12]
	}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b08a      	sub	sp, #40	; 0x28
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e7fe      	b.n	80056e2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d909      	bls.n	8005700 <xQueueCreateCountingSemaphoreStatic+0x42>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e7fe      	b.n	80056fe <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005700:	2302      	movs	r3, #2
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	2100      	movs	r1, #0
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff feb8 	bl	8005480 <xQueueGenericCreateStatic>
 8005710:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800571e:	69fb      	ldr	r3, [r7, #28]
	}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <xQueueCreateCountingSemaphore+0x24>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e7fe      	b.n	800574a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d909      	bls.n	8005768 <xQueueCreateCountingSemaphore+0x40>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e7fe      	b.n	8005766 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005768:	2202      	movs	r2, #2
 800576a:	2100      	movs	r1, #0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fef9 	bl	8005564 <xQueueGenericCreate>
 8005772:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005780:	697b      	ldr	r3, [r7, #20]
	}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <xQueueGenericSend+0x30>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ba:	e7fe      	b.n	80057ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <xQueueGenericSend+0x3e>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <xQueueGenericSend+0x42>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <xQueueGenericSend+0x44>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <xQueueGenericSend+0x5c>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 80057e6:	e7fe      	b.n	80057e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x6a>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <xQueueGenericSend+0x6e>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericSend+0x70>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <xQueueGenericSend+0x88>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	e7fe      	b.n	8005812 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005814:	f001 fb84 	bl	8006f20 <xTaskGetSchedulerState>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <xQueueGenericSend+0x98>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueGenericSend+0x9c>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <xQueueGenericSend+0x9e>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <xQueueGenericSend+0xb6>
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e7fe      	b.n	8005840 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005842:	f7ff fc9b 	bl	800517c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <xQueueGenericSend+0xcc>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d129      	bne.n	80058ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585e:	f000 fbbe 	bl	8005fde <prvCopyDataToQueue>
 8005862:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d010      	beq.n	800588e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	3324      	adds	r3, #36	; 0x24
 8005870:	4618      	mov	r0, r3
 8005872:	f001 f999 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800587c:	4b3f      	ldr	r3, [pc, #252]	; (800597c <xQueueGenericSend+0x1f0>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	e00a      	b.n	80058a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005894:	4b39      	ldr	r3, [pc, #228]	; (800597c <xQueueGenericSend+0x1f0>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058a4:	f7ff fc98 	bl	80051d8 <vPortExitCritical>
				return pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e063      	b.n	8005974 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058b2:	f7ff fc91 	bl	80051d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e05c      	b.n	8005974 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 f9d1 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ce:	f7ff fc83 	bl	80051d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058d2:	f000 ff47 	bl	8006764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058d6:	f7ff fc51 	bl	800517c <vPortEnterCritical>
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d103      	bne.n	80058f0 <xQueueGenericSend+0x164>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d103      	bne.n	8005906 <xQueueGenericSend+0x17a>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005906:	f7ff fc67 	bl	80051d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800590a:	1d3a      	adds	r2, r7, #4
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f001 f9c0 	bl	8006c98 <xTaskCheckForTimeOut>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d124      	bne.n	8005968 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800591e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005920:	f000 fc55 	bl	80061ce <prvIsQueueFull>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	3310      	adds	r3, #16
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f001 f8ea 	bl	8006b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800593a:	f000 fbe0 	bl	80060fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800593e:	f000 ff1f 	bl	8006780 <xTaskResumeAll>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f af7c 	bne.w	8005842 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <xQueueGenericSend+0x1f0>)
 800594c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	e772      	b.n	8005842 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800595c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595e:	f000 fbce 	bl	80060fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005962:	f000 ff0d 	bl	8006780 <xTaskResumeAll>
 8005966:	e76c      	b.n	8005842 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596a:	f000 fbc8 	bl	80060fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800596e:	f000 ff07 	bl	8006780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005972:	2300      	movs	r3, #0
		}
	}
}
 8005974:	4618      	mov	r0, r3
 8005976:	3738      	adds	r7, #56	; 0x38
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08e      	sub	sp, #56	; 0x38
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <xQueueGenericSendFromISR+0x2c>
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	e7fe      	b.n	80059aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <xQueueGenericSendFromISR+0x3a>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <xQueueGenericSendFromISR+0x3e>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueGenericSendFromISR+0x40>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <xQueueGenericSendFromISR+0x58>
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	e7fe      	b.n	80059d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d103      	bne.n	80059e6 <xQueueGenericSendFromISR+0x66>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <xQueueGenericSendFromISR+0x6a>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueGenericSendFromISR+0x6c>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <xQueueGenericSendFromISR+0x84>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e7fe      	b.n	8005a02 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a04:	f7ff fc96 	bl	8005334 <vPortValidateInterruptPriority>
	__asm volatile
 8005a08:	f3ef 8211 	mrs	r2, BASEPRI
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	61ba      	str	r2, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <xQueueGenericSendFromISR+0xb6>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d12c      	bne.n	8005a90 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a46:	f000 faca 	bl	8005fde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d112      	bne.n	8005a7a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	3324      	adds	r3, #36	; 0x24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f8a1 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e007      	b.n	8005a8a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	3301      	adds	r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	b25a      	sxtb	r2, r3
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a8e:	e001      	b.n	8005a94 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3738      	adds	r7, #56	; 0x38
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <xQueueReceive+0x2e>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <xQueueReceive+0x3c>
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <xQueueReceive+0x40>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <xQueueReceive+0x42>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <xQueueReceive+0x5a>
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e7fe      	b.n	8005b00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b02:	f001 fa0d 	bl	8006f20 <xTaskGetSchedulerState>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <xQueueReceive+0x6a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueReceive+0x6e>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueReceive+0x70>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <xQueueReceive+0x88>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e7fe      	b.n	8005b2e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b30:	f7ff fb24 	bl	800517c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01f      	beq.n	8005b80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 fab5 	bl	80060b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1e5a      	subs	r2, r3, #1
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00f      	beq.n	8005b78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	3310      	adds	r3, #16
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f823 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b68:	4b3c      	ldr	r3, [pc, #240]	; (8005c5c <xQueueReceive+0x1b4>)
 8005b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b78:	f7ff fb2e 	bl	80051d8 <vPortExitCritical>
				return pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e069      	b.n	8005c54 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b86:	f7ff fb27 	bl	80051d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e062      	b.n	8005c54 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b94:	f107 0310 	add.w	r3, r7, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f867 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba2:	f7ff fb19 	bl	80051d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba6:	f000 fddd 	bl	8006764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005baa:	f7ff fae7 	bl	800517c <vPortEnterCritical>
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d103      	bne.n	8005bc4 <xQueueReceive+0x11c>
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d103      	bne.n	8005bda <xQueueReceive+0x132>
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bda:	f7ff fafd 	bl	80051d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bde:	1d3a      	adds	r2, r7, #4
 8005be0:	f107 0310 	add.w	r3, r7, #16
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 f856 	bl	8006c98 <xTaskCheckForTimeOut>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d123      	bne.n	8005c3a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf4:	f000 fad5 	bl	80061a2 <prvIsQueueEmpty>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	3324      	adds	r3, #36	; 0x24
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 ff80 	bl	8006b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0e:	f000 fa76 	bl	80060fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c12:	f000 fdb5 	bl	8006780 <xTaskResumeAll>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d189      	bne.n	8005b30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <xQueueReceive+0x1b4>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	e780      	b.n	8005b30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c30:	f000 fa65 	bl	80060fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c34:	f000 fda4 	bl	8006780 <xTaskResumeAll>
 8005c38:	e77a      	b.n	8005b30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3c:	f000 fa5f 	bl	80060fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c40:	f000 fd9e 	bl	8006780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c46:	f000 faac 	bl	80061a2 <prvIsQueueEmpty>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f43f af6f 	beq.w	8005b30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3730      	adds	r7, #48	; 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <xQueueSemaphoreTake+0x30>
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	623b      	str	r3, [r7, #32]
 8005c8e:	e7fe      	b.n	8005c8e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <xQueueSemaphoreTake+0x4c>
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	e7fe      	b.n	8005caa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cac:	f001 f938 	bl	8006f20 <xTaskGetSchedulerState>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <xQueueSemaphoreTake+0x5c>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <xQueueSemaphoreTake+0x60>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <xQueueSemaphoreTake+0x62>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <xQueueSemaphoreTake+0x7a>
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cda:	f7ff fa4f 	bl	800517c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d024      	beq.n	8005d34 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cfa:	f001 fa8d 	bl	8007218 <pvTaskIncrementMutexHeldCount>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00f      	beq.n	8005d2c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	3310      	adds	r3, #16
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff49 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d1c:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <xQueueSemaphoreTake+0x20c>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d2c:	f7ff fa54 	bl	80051d8 <vPortExitCritical>
				return pdPASS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e096      	b.n	8005e62 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <xQueueSemaphoreTake+0xf4>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e7fe      	b.n	8005d52 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d54:	f7ff fa40 	bl	80051d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e082      	b.n	8005e62 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d62:	f107 030c 	add.w	r3, r7, #12
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff80 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d70:	f7ff fa32 	bl	80051d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d74:	f000 fcf6 	bl	8006764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d78:	f7ff fa00 	bl	800517c <vPortEnterCritical>
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d103      	bne.n	8005d92 <xQueueSemaphoreTake+0x132>
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d103      	bne.n	8005da8 <xQueueSemaphoreTake+0x148>
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da8:	f7ff fa16 	bl	80051d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dac:	463a      	mov	r2, r7
 8005dae:	f107 030c 	add.w	r3, r7, #12
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 ff6f 	bl	8006c98 <xTaskCheckForTimeOut>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d132      	bne.n	8005e26 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dc2:	f000 f9ee 	bl	80061a2 <prvIsQueueEmpty>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d026      	beq.n	8005e1a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005dd4:	f7ff f9d2 	bl	800517c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f8bd 	bl	8006f5c <xTaskPriorityInherit>
 8005de2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005de4:	f7ff f9f8 	bl	80051d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	3324      	adds	r3, #36	; 0x24
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fe8b 	bl	8006b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005df8:	f000 f981 	bl	80060fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dfc:	f000 fcc0 	bl	8006780 <xTaskResumeAll>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f47f af69 	bne.w	8005cda <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <xQueueSemaphoreTake+0x20c>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	e75f      	b.n	8005cda <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e1c:	f000 f96f 	bl	80060fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e20:	f000 fcae 	bl	8006780 <xTaskResumeAll>
 8005e24:	e759      	b.n	8005cda <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e28:	f000 f969 	bl	80060fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e2c:	f000 fca8 	bl	8006780 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e32:	f000 f9b6 	bl	80061a2 <prvIsQueueEmpty>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f43f af4e 	beq.w	8005cda <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005e44:	f7ff f99a 	bl	800517c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e4a:	f000 f8b0 	bl	8005fae <prvGetDisinheritPriorityAfterTimeout>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f95a 	bl	8007110 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e5c:	f7ff f9bc 	bl	80051d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3738      	adds	r7, #56	; 0x38
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <xQueueReceiveFromISR+0x2a>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	623b      	str	r3, [r7, #32]
 8005e98:	e7fe      	b.n	8005e98 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d103      	bne.n	8005ea8 <xQueueReceiveFromISR+0x38>
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <xQueueReceiveFromISR+0x3c>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <xQueueReceiveFromISR+0x3e>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <xQueueReceiveFromISR+0x56>
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ec6:	f7ff fa35 	bl	8005334 <vPortValidateInterruptPriority>
	__asm volatile
 8005eca:	f3ef 8211 	mrs	r2, BASEPRI
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	61ba      	str	r2, [r7, #24]
 8005ee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ee2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02f      	beq.n	8005f52 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f00:	f000 f8d7 	bl	80060b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	1e5a      	subs	r2, r3, #1
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d112      	bne.n	8005f3c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	3310      	adds	r3, #16
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fe40 	bl	8006ba8 <xTaskRemoveFromEventList>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e007      	b.n	8005f4c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	b25a      	sxtb	r2, r3
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f50:	e001      	b.n	8005f56 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3738      	adds	r7, #56	; 0x38
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <vQueueDelete+0x26>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	e7fe      	b.n	8005f8e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f95d 	bl	8006250 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fe fdf7 	bl	8004b94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e001      	b.n	8005fd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d14d      	bne.n	80060a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f815 	bl	8007038 <xTaskPriorityDisinherit>
 800600e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	e043      	b.n	80060a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d119      	bne.n	8006052 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6898      	ldr	r0, [r3, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	461a      	mov	r2, r3
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	f001 fc91 	bl	8007950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	441a      	add	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d32b      	bcc.n	80060a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	e026      	b.n	80060a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68d8      	ldr	r0, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	461a      	mov	r2, r3
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	f001 fc77 	bl	8007950 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	425b      	negs	r3, r3
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d207      	bcs.n	800608e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	425b      	negs	r3, r3
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d105      	bne.n	80060a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3b01      	subs	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d018      	beq.n	80060f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d303      	bcc.n	80060e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68d9      	ldr	r1, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	461a      	mov	r2, r3
 80060f0:	6838      	ldr	r0, [r7, #0]
 80060f2:	f001 fc2d 	bl	8007950 <memcpy>
	}
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006106:	f7ff f839 	bl	800517c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006110:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006112:	e011      	b.n	8006138 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3324      	adds	r3, #36	; 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fd41 	bl	8006ba8 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800612c:	f000 fe14 	bl	8006d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	3b01      	subs	r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dce9      	bgt.n	8006114 <prvUnlockQueue+0x16>
 8006140:	e000      	b.n	8006144 <prvUnlockQueue+0x46>
					break;
 8006142:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22ff      	movs	r2, #255	; 0xff
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800614c:	f7ff f844 	bl	80051d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006150:	f7ff f814 	bl	800517c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615c:	e011      	b.n	8006182 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3310      	adds	r3, #16
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd1c 	bl	8006ba8 <xTaskRemoveFromEventList>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006176:	f000 fdef 	bl	8006d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dce9      	bgt.n	800615e <prvUnlockQueue+0x60>
 800618a:	e000      	b.n	800618e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800618c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	22ff      	movs	r2, #255	; 0xff
 8006192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006196:	f7ff f81f 	bl	80051d8 <vPortExitCritical>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061aa:	f7fe ffe7 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e001      	b.n	80061c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061c0:	f7ff f80a 	bl	80051d8 <vPortExitCritical>

	return xReturn;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d6:	f7fe ffd1 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d102      	bne.n	80061ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e001      	b.n	80061f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f0:	f7fe fff2 	bl	80051d8 <vPortExitCritical>

	return xReturn;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e014      	b.n	800623a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006210:	4a0e      	ldr	r2, [pc, #56]	; (800624c <vQueueAddToRegistry+0x4c>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800621c:	490b      	ldr	r1, [pc, #44]	; (800624c <vQueueAddToRegistry+0x4c>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <vQueueAddToRegistry+0x4c>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006232:	e005      	b.n	8006240 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b07      	cmp	r3, #7
 800623e:	d9e7      	bls.n	8006210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	2001bfe0 	.word	0x2001bfe0

08006250 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e016      	b.n	800628c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800625e:	4a10      	ldr	r2, [pc, #64]	; (80062a0 <vQueueUnregisterQueue+0x50>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d10b      	bne.n	8006286 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800626e:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <vQueueUnregisterQueue+0x50>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2100      	movs	r1, #0
 8006274:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <vQueueUnregisterQueue+0x50>)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	4413      	add	r3, r2
 8006280:	2200      	movs	r2, #0
 8006282:	605a      	str	r2, [r3, #4]
				break;
 8006284:	e005      	b.n	8006292 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b07      	cmp	r3, #7
 8006290:	d9e5      	bls.n	800625e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2001bfe0 	.word	0x2001bfe0

080062a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062b4:	f7fe ff62 	bl	800517c <vPortEnterCritical>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <vQueueWaitForMessageRestricted+0x2a>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <vQueueWaitForMessageRestricted+0x40>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e4:	f7fe ff78 	bl	80051d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fc2b 	bl	8006b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7ff fefd 	bl	80060fe <prvUnlockQueue>
	}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af04      	add	r7, sp, #16
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <xTaskCreateStatic+0x28>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	e7fe      	b.n	8006332 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <xTaskCreateStatic+0x42>
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e7fe      	b.n	800634c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800634e:	235c      	movs	r3, #92	; 0x5c
 8006350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b5c      	cmp	r3, #92	; 0x5c
 8006356:	d009      	beq.n	800636c <xTaskCreateStatic+0x60>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e7fe      	b.n	800636a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01e      	beq.n	80063b0 <xTaskCreateStatic+0xa4>
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2202      	movs	r2, #2
 8006386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800638a:	2300      	movs	r3, #0
 800638c:	9303      	str	r3, [sp, #12]
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	f107 0314 	add.w	r3, r7, #20
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f850 	bl	8006448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063aa:	f000 f8d3 	bl	8006554 <prvAddNewTaskToReadyList>
 80063ae:	e001      	b.n	80063b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
	}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3728      	adds	r7, #40	; 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b08c      	sub	sp, #48	; 0x30
 80063c2:	af04      	add	r7, sp, #16
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fb1c 	bl	8004a10 <pvPortMalloc>
 80063d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063e0:	205c      	movs	r0, #92	; 0x5c
 80063e2:	f7fe fb15 	bl	8004a10 <pvPortMalloc>
 80063e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
 80063f4:	e005      	b.n	8006402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7fe fbcc 	bl	8004b94 <vPortFree>
 80063fc:	e001      	b.n	8006402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d017      	beq.n	8006438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	2300      	movs	r3, #0
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	9302      	str	r3, [sp, #8]
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f80e 	bl	8006448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800642c:	69f8      	ldr	r0, [r7, #28]
 800642e:	f000 f891 	bl	8006554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006432:	2301      	movs	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e002      	b.n	800643e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800643e:	69bb      	ldr	r3, [r7, #24]
	}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	461a      	mov	r2, r3
 8006460:	21a5      	movs	r1, #165	; 0xa5
 8006462:	f001 fa80 	bl	8007966 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006470:	3b01      	subs	r3, #1
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <prvInitialiseNewTask+0x56>
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e7fe      	b.n	800649c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	e012      	b.n	80064ca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	7819      	ldrb	r1, [r3, #0]
 80064ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	3334      	adds	r3, #52	; 0x34
 80064b4:	460a      	mov	r2, r1
 80064b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d006      	beq.n	80064d2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b0f      	cmp	r3, #15
 80064ce:	d9e9      	bls.n	80064a4 <prvInitialiseNewTask+0x5c>
 80064d0:	e000      	b.n	80064d4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80064d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b37      	cmp	r3, #55	; 0x37
 80064e0:	d901      	bls.n	80064e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064e2:	2337      	movs	r3, #55	; 0x37
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2200      	movs	r2, #0
 80064f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fc7f 	bl	8004e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3318      	adds	r3, #24
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fc7a 	bl	8004e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2200      	movs	r2, #0
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f7fe fcf7 	bl	8004f28 <pxPortInitialiseStack>
 800653a:	4602      	mov	r2, r0
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654c:	bf00      	nop
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800655c:	f7fe fe0e 	bl	800517c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006560:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <prvAddNewTaskToReadyList+0xc4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <prvAddNewTaskToReadyList+0xc4>)
 8006568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800656a:	4b2c      	ldr	r3, [pc, #176]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006572:	4a2a      	ldr	r2, [pc, #168]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006578:	4b27      	ldr	r3, [pc, #156]	; (8006618 <prvAddNewTaskToReadyList+0xc4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d110      	bne.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006580:	f000 fc0e 	bl	8006da0 <prvInitialiseTaskLists>
 8006584:	e00d      	b.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006586:	4b26      	ldr	r3, [pc, #152]	; (8006620 <prvAddNewTaskToReadyList+0xcc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800658e:	4b23      	ldr	r3, [pc, #140]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	429a      	cmp	r2, r3
 800659a:	d802      	bhi.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800659c:	4a1f      	ldr	r2, [pc, #124]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <prvAddNewTaskToReadyList+0xd0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3301      	adds	r3, #1
 80065a8:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <prvAddNewTaskToReadyList+0xd0>)
 80065aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <prvAddNewTaskToReadyList+0xd0>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <prvAddNewTaskToReadyList+0xd4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d903      	bls.n	80065c8 <prvAddNewTaskToReadyList+0x74>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <prvAddNewTaskToReadyList+0xd4>)
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4a15      	ldr	r2, [pc, #84]	; (800662c <prvAddNewTaskToReadyList+0xd8>)
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe fc1b 	bl	8004e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065e4:	f7fe fdf8 	bl	80051d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <prvAddNewTaskToReadyList+0xcc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d207      	bcs.n	800660e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <prvAddNewTaskToReadyList+0xdc>)
 8006600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	2001bd30 	.word	0x2001bd30
 800661c:	2001b85c 	.word	0x2001b85c
 8006620:	2001bd3c 	.word	0x2001bd3c
 8006624:	2001bd4c 	.word	0x2001bd4c
 8006628:	2001bd38 	.word	0x2001bd38
 800662c:	2001b860 	.word	0x2001b860
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <vTaskDelay+0x60>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <vTaskDelay+0x2e>
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	e7fe      	b.n	8006660 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006662:	f000 f87f 	bl	8006764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006666:	2100      	movs	r1, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fde9 	bl	8007240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800666e:	f000 f887 	bl	8006780 <xTaskResumeAll>
 8006672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <vTaskDelay+0x64>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2001bd58 	.word	0x2001bd58
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066aa:	463a      	mov	r2, r7
 80066ac:	1d39      	adds	r1, r7, #4
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f978 	bl	80049a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	9202      	str	r2, [sp, #8]
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	2300      	movs	r3, #0
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	460a      	mov	r2, r1
 80066ca:	4920      	ldr	r1, [pc, #128]	; (800674c <vTaskStartScheduler+0xb0>)
 80066cc:	4820      	ldr	r0, [pc, #128]	; (8006750 <vTaskStartScheduler+0xb4>)
 80066ce:	f7ff fe1d 	bl	800630c <xTaskCreateStatic>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <vTaskStartScheduler+0xb8>)
 80066d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066d8:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <vTaskStartScheduler+0xb8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e001      	b.n	80066ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d102      	bne.n	80066f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066f0:	f000 fdfa 	bl	80072e8 <xTimerCreateTimerTask>
 80066f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d115      	bne.n	8006728 <vTaskStartScheduler+0x8c>
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <vTaskStartScheduler+0xbc>)
 8006710:	f04f 32ff 	mov.w	r2, #4294967295
 8006714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <vTaskStartScheduler+0xc0>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800671c:	4b10      	ldr	r3, [pc, #64]	; (8006760 <vTaskStartScheduler+0xc4>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006722:	f7fe fc8d 	bl	8005040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006726:	e00d      	b.n	8006744 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d109      	bne.n	8006744 <vTaskStartScheduler+0xa8>
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e7fe      	b.n	8006742 <vTaskStartScheduler+0xa6>
}
 8006744:	bf00      	nop
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	080083a4 	.word	0x080083a4
 8006750:	08006d71 	.word	0x08006d71
 8006754:	2001bd54 	.word	0x2001bd54
 8006758:	2001bd50 	.word	0x2001bd50
 800675c:	2001bd3c 	.word	0x2001bd3c
 8006760:	2001bd34 	.word	0x2001bd34

08006764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <vTaskSuspendAll+0x18>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	4a03      	ldr	r2, [pc, #12]	; (800677c <vTaskSuspendAll+0x18>)
 8006770:	6013      	str	r3, [r2, #0]
}
 8006772:	bf00      	nop
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	2001bd58 	.word	0x2001bd58

08006780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <xTaskResumeAll+0x114>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <xTaskResumeAll+0x2a>
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	e7fe      	b.n	80067a8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067aa:	f7fe fce7 	bl	800517c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067ae:	4b39      	ldr	r3, [pc, #228]	; (8006894 <xTaskResumeAll+0x114>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	4a37      	ldr	r2, [pc, #220]	; (8006894 <xTaskResumeAll+0x114>)
 80067b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b8:	4b36      	ldr	r3, [pc, #216]	; (8006894 <xTaskResumeAll+0x114>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d162      	bne.n	8006886 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067c0:	4b35      	ldr	r3, [pc, #212]	; (8006898 <xTaskResumeAll+0x118>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d05e      	beq.n	8006886 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c8:	e02f      	b.n	800682a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80067ca:	4b34      	ldr	r3, [pc, #208]	; (800689c <xTaskResumeAll+0x11c>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3318      	adds	r3, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fb7c 	bl	8004ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3304      	adds	r3, #4
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fb77 	bl	8004ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <xTaskResumeAll+0x120>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d903      	bls.n	80067fa <xTaskResumeAll+0x7a>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <xTaskResumeAll+0x120>)
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <xTaskResumeAll+0x124>)
 8006808:	441a      	add	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f7fe fb02 	bl	8004e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <xTaskResumeAll+0x128>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006824:	4b21      	ldr	r3, [pc, #132]	; (80068ac <xTaskResumeAll+0x12c>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800682a:	4b1c      	ldr	r3, [pc, #112]	; (800689c <xTaskResumeAll+0x11c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1cb      	bne.n	80067ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006838:	f000 fb4c 	bl	8006ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <xTaskResumeAll+0x130>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d010      	beq.n	800686a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006848:	f000 f846 	bl	80068d8 <xTaskIncrementTick>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006852:	4b16      	ldr	r3, [pc, #88]	; (80068ac <xTaskResumeAll+0x12c>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3b01      	subs	r3, #1
 800685c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1f1      	bne.n	8006848 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <xTaskResumeAll+0x130>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <xTaskResumeAll+0x12c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <xTaskResumeAll+0x134>)
 8006878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006886:	f7fe fca7 	bl	80051d8 <vPortExitCritical>

	return xAlreadyYielded;
 800688a:	68bb      	ldr	r3, [r7, #8]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	2001bd58 	.word	0x2001bd58
 8006898:	2001bd30 	.word	0x2001bd30
 800689c:	2001bcf0 	.word	0x2001bcf0
 80068a0:	2001bd38 	.word	0x2001bd38
 80068a4:	2001b860 	.word	0x2001b860
 80068a8:	2001b85c 	.word	0x2001b85c
 80068ac:	2001bd44 	.word	0x2001bd44
 80068b0:	2001bd40 	.word	0x2001bd40
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <xTaskGetTickCount+0x1c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068c4:	687b      	ldr	r3, [r7, #4]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2001bd34 	.word	0x2001bd34

080068d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e2:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <xTaskIncrementTick+0x150>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 808d 	bne.w	8006a06 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068ec:	4b4f      	ldr	r3, [pc, #316]	; (8006a2c <xTaskIncrementTick+0x154>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068f4:	4a4d      	ldr	r2, [pc, #308]	; (8006a2c <xTaskIncrementTick+0x154>)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11f      	bne.n	8006940 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006900:	4b4b      	ldr	r3, [pc, #300]	; (8006a30 <xTaskIncrementTick+0x158>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <xTaskIncrementTick+0x46>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	e7fe      	b.n	800691c <xTaskIncrementTick+0x44>
 800691e:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <xTaskIncrementTick+0x158>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	4b43      	ldr	r3, [pc, #268]	; (8006a34 <xTaskIncrementTick+0x15c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a41      	ldr	r2, [pc, #260]	; (8006a30 <xTaskIncrementTick+0x158>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4a41      	ldr	r2, [pc, #260]	; (8006a34 <xTaskIncrementTick+0x15c>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <xTaskIncrementTick+0x160>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3301      	adds	r3, #1
 8006938:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <xTaskIncrementTick+0x160>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	f000 faca 	bl	8006ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006940:	4b3e      	ldr	r3, [pc, #248]	; (8006a3c <xTaskIncrementTick+0x164>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	429a      	cmp	r2, r3
 8006948:	d34e      	bcc.n	80069e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800694a:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <xTaskIncrementTick+0x158>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <xTaskIncrementTick+0x80>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <xTaskIncrementTick+0x82>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800695e:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <xTaskIncrementTick+0x164>)
 8006960:	f04f 32ff 	mov.w	r2, #4294967295
 8006964:	601a      	str	r2, [r3, #0]
					break;
 8006966:	e03f      	b.n	80069e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006968:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <xTaskIncrementTick+0x158>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d203      	bcs.n	8006988 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006980:	4a2e      	ldr	r2, [pc, #184]	; (8006a3c <xTaskIncrementTick+0x164>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6013      	str	r3, [r2, #0]
						break;
 8006986:	e02f      	b.n	80069e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe faa1 	bl	8004ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	3318      	adds	r3, #24
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fa98 	bl	8004ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <xTaskIncrementTick+0x168>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <xTaskIncrementTick+0xe0>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a22      	ldr	r2, [pc, #136]	; (8006a40 <xTaskIncrementTick+0x168>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <xTaskIncrementTick+0x16c>)
 80069c6:	441a      	add	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fa23 	bl	8004e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <xTaskIncrementTick+0x170>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	429a      	cmp	r2, r3
 80069e0:	d3b3      	bcc.n	800694a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80069e2:	2301      	movs	r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e6:	e7b0      	b.n	800694a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <xTaskIncrementTick+0x170>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4915      	ldr	r1, [pc, #84]	; (8006a44 <xTaskIncrementTick+0x16c>)
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d907      	bls.n	8006a10 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e004      	b.n	8006a10 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <xTaskIncrementTick+0x174>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4a0f      	ldr	r2, [pc, #60]	; (8006a4c <xTaskIncrementTick+0x174>)
 8006a0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <xTaskIncrementTick+0x178>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a1c:	697b      	ldr	r3, [r7, #20]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	2001bd58 	.word	0x2001bd58
 8006a2c:	2001bd34 	.word	0x2001bd34
 8006a30:	2001bce8 	.word	0x2001bce8
 8006a34:	2001bcec 	.word	0x2001bcec
 8006a38:	2001bd48 	.word	0x2001bd48
 8006a3c:	2001bd50 	.word	0x2001bd50
 8006a40:	2001bd38 	.word	0x2001bd38
 8006a44:	2001b860 	.word	0x2001b860
 8006a48:	2001b85c 	.word	0x2001b85c
 8006a4c:	2001bd40 	.word	0x2001bd40
 8006a50:	2001bd44 	.word	0x2001bd44

08006a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a5a:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <vTaskSwitchContext+0xa4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <vTaskSwitchContext+0xa8>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a68:	e040      	b.n	8006aec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <vTaskSwitchContext+0xa8>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a70:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <vTaskSwitchContext+0xac>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e00f      	b.n	8006a98 <vTaskSwitchContext+0x44>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <vTaskSwitchContext+0x3e>
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	e7fe      	b.n	8006a90 <vTaskSwitchContext+0x3c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	491a      	ldr	r1, [pc, #104]	; (8006b04 <vTaskSwitchContext+0xb0>)
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0e5      	beq.n	8006a78 <vTaskSwitchContext+0x24>
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <vTaskSwitchContext+0xb0>)
 8006ab8:	4413      	add	r3, r2
 8006aba:	60bb      	str	r3, [r7, #8]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	3308      	adds	r3, #8
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d104      	bne.n	8006adc <vTaskSwitchContext+0x88>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	605a      	str	r2, [r3, #4]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <vTaskSwitchContext+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4a06      	ldr	r2, [pc, #24]	; (8006b00 <vTaskSwitchContext+0xac>)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	2001bd58 	.word	0x2001bd58
 8006afc:	2001bd44 	.word	0x2001bd44
 8006b00:	2001bd38 	.word	0x2001bd38
 8006b04:	2001b860 	.word	0x2001b860
 8006b08:	2001b85c 	.word	0x2001b85c

08006b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d109      	bne.n	8006b30 <vTaskPlaceOnEventList+0x24>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e7fe      	b.n	8006b2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <vTaskPlaceOnEventList+0x44>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3318      	adds	r3, #24
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fe f992 	bl	8004e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6838      	ldr	r0, [r7, #0]
 8006b42:	f000 fb7d 	bl	8007240 <prvAddCurrentTaskToDelayedList>
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	2001b85c 	.word	0x2001b85c

08006b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <vTaskPlaceOnEventListRestricted+0x26>
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e7fe      	b.n	8006b78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <vTaskPlaceOnEventListRestricted+0x50>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4619      	mov	r1, r3
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7fe f949 	bl	8004e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	68b8      	ldr	r0, [r7, #8]
 8006b98:	f000 fb52 	bl	8007240 <prvAddCurrentTaskToDelayedList>
	}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	2001b85c 	.word	0x2001b85c

08006ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <xTaskRemoveFromEventList+0x2a>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe f97c 	bl	8004ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <xTaskRemoveFromEventList+0xac>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11d      	bne.n	8006c20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe f973 	bl	8004ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <xTaskRemoveFromEventList+0xb0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d903      	bls.n	8006c02 <xTaskRemoveFromEventList+0x5a>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <xTaskRemoveFromEventList+0xb0>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a13      	ldr	r2, [pc, #76]	; (8006c5c <xTaskRemoveFromEventList+0xb4>)
 8006c10:	441a      	add	r2, r3
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7fe f8fe 	bl	8004e1a <vListInsertEnd>
 8006c1e:	e005      	b.n	8006c2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3318      	adds	r3, #24
 8006c24:	4619      	mov	r1, r3
 8006c26:	480e      	ldr	r0, [pc, #56]	; (8006c60 <xTaskRemoveFromEventList+0xb8>)
 8006c28:	f7fe f8f7 	bl	8004e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <xTaskRemoveFromEventList+0xbc>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d905      	bls.n	8006c46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <xTaskRemoveFromEventList+0xc0>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e001      	b.n	8006c4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006c4a:	697b      	ldr	r3, [r7, #20]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	2001bd58 	.word	0x2001bd58
 8006c58:	2001bd38 	.word	0x2001bd38
 8006c5c:	2001b860 	.word	0x2001b860
 8006c60:	2001bcf0 	.word	0x2001bcf0
 8006c64:	2001b85c 	.word	0x2001b85c
 8006c68:	2001bd44 	.word	0x2001bd44

08006c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c74:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <vTaskInternalSetTimeOutState+0x24>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <vTaskInternalSetTimeOutState+0x28>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	605a      	str	r2, [r3, #4]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	2001bd48 	.word	0x2001bd48
 8006c94:	2001bd34 	.word	0x2001bd34

08006c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <xTaskCheckForTimeOut+0x24>
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	e7fe      	b.n	8006cba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <xTaskCheckForTimeOut+0x3e>
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e7fe      	b.n	8006cd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006cd6:	f7fe fa51 	bl	800517c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <xTaskCheckForTimeOut+0xb8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf2:	d102      	bne.n	8006cfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e023      	b.n	8006d42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <xTaskCheckForTimeOut+0xbc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d007      	beq.n	8006d16 <xTaskCheckForTimeOut+0x7e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e015      	b.n	8006d42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d20b      	bcs.n	8006d38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff9d 	bl	8006c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	e004      	b.n	8006d42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d42:	f7fe fa49 	bl	80051d8 <vPortExitCritical>

	return xReturn;
 8006d46:	69fb      	ldr	r3, [r7, #28]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	2001bd34 	.word	0x2001bd34
 8006d54:	2001bd48 	.word	0x2001bd48

08006d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <vTaskMissedYield+0x14>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
}
 8006d62:	bf00      	nop
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2001bd44 	.word	0x2001bd44

08006d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d78:	f000 f852 	bl	8006e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <prvIdleTask+0x28>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d9f9      	bls.n	8006d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <prvIdleTask+0x2c>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d94:	e7f0      	b.n	8006d78 <prvIdleTask+0x8>
 8006d96:	bf00      	nop
 8006d98:	2001b860 	.word	0x2001b860
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	e00c      	b.n	8006dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <prvInitialiseTaskLists+0x60>)
 8006db8:	4413      	add	r3, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe f800 	bl	8004dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b37      	cmp	r3, #55	; 0x37
 8006dca:	d9ef      	bls.n	8006dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dcc:	480d      	ldr	r0, [pc, #52]	; (8006e04 <prvInitialiseTaskLists+0x64>)
 8006dce:	f7fd fff7 	bl	8004dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dd2:	480d      	ldr	r0, [pc, #52]	; (8006e08 <prvInitialiseTaskLists+0x68>)
 8006dd4:	f7fd fff4 	bl	8004dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd8:	480c      	ldr	r0, [pc, #48]	; (8006e0c <prvInitialiseTaskLists+0x6c>)
 8006dda:	f7fd fff1 	bl	8004dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dde:	480c      	ldr	r0, [pc, #48]	; (8006e10 <prvInitialiseTaskLists+0x70>)
 8006de0:	f7fd ffee 	bl	8004dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006de4:	480b      	ldr	r0, [pc, #44]	; (8006e14 <prvInitialiseTaskLists+0x74>)
 8006de6:	f7fd ffeb 	bl	8004dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <prvInitialiseTaskLists+0x78>)
 8006dec:	4a05      	ldr	r2, [pc, #20]	; (8006e04 <prvInitialiseTaskLists+0x64>)
 8006dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <prvInitialiseTaskLists+0x7c>)
 8006df2:	4a05      	ldr	r2, [pc, #20]	; (8006e08 <prvInitialiseTaskLists+0x68>)
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2001b860 	.word	0x2001b860
 8006e04:	2001bcc0 	.word	0x2001bcc0
 8006e08:	2001bcd4 	.word	0x2001bcd4
 8006e0c:	2001bcf0 	.word	0x2001bcf0
 8006e10:	2001bd04 	.word	0x2001bd04
 8006e14:	2001bd1c 	.word	0x2001bd1c
 8006e18:	2001bce8 	.word	0x2001bce8
 8006e1c:	2001bcec 	.word	0x2001bcec

08006e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e26:	e019      	b.n	8006e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e28:	f7fe f9a8 	bl	800517c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <prvCheckTasksWaitingTermination+0x4c>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe f84b 	bl	8004ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <prvCheckTasksWaitingTermination+0x50>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <prvCheckTasksWaitingTermination+0x50>)
 8006e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <prvCheckTasksWaitingTermination+0x54>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <prvCheckTasksWaitingTermination+0x54>)
 8006e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e52:	f7fe f9c1 	bl	80051d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f80e 	bl	8006e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <prvCheckTasksWaitingTermination+0x54>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e1      	bne.n	8006e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	2001bd04 	.word	0x2001bd04
 8006e70:	2001bd30 	.word	0x2001bd30
 8006e74:	2001bd18 	.word	0x2001bd18

08006e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d108      	bne.n	8006e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fd fe80 	bl	8004b94 <vPortFree>
				vPortFree( pxTCB );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fd fe7d 	bl	8004b94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e9a:	e017      	b.n	8006ecc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d103      	bne.n	8006eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd fe74 	bl	8004b94 <vPortFree>
	}
 8006eac:	e00e      	b.n	8006ecc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d009      	beq.n	8006ecc <prvDeleteTCB+0x54>
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e7fe      	b.n	8006eca <prvDeleteTCB+0x52>
	}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eda:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <prvResetNextTaskUnblockTime+0x44>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <prvResetNextTaskUnblockTime+0x14>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <prvResetNextTaskUnblockTime+0x16>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <prvResetNextTaskUnblockTime+0x48>)
 8006ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef6:	e008      	b.n	8006f0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <prvResetNextTaskUnblockTime+0x44>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4a05      	ldr	r2, [pc, #20]	; (8006f1c <prvResetNextTaskUnblockTime+0x48>)
 8006f08:	6013      	str	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	2001bce8 	.word	0x2001bce8
 8006f1c:	2001bd50 	.word	0x2001bd50

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <xTaskGetSchedulerState+0x38>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
	}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2001bd3c 	.word	0x2001bd3c
 8006f58:	2001bd58 	.word	0x2001bd58

08006f5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d056      	beq.n	8007020 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <xTaskPriorityInherit+0xd0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d246      	bcs.n	800700e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	db06      	blt.n	8006f96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f88:	4b28      	ldr	r3, [pc, #160]	; (800702c <xTaskPriorityInherit+0xd0>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6959      	ldr	r1, [r3, #20]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a22      	ldr	r2, [pc, #136]	; (8007030 <xTaskPriorityInherit+0xd4>)
 8006fa8:	4413      	add	r3, r2
 8006faa:	4299      	cmp	r1, r3
 8006fac:	d101      	bne.n	8006fb2 <xTaskPriorityInherit+0x56>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xTaskPriorityInherit+0x58>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d022      	beq.n	8006ffe <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fd ff89 	bl	8004ed4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <xTaskPriorityInherit+0xd0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4b18      	ldr	r3, [pc, #96]	; (8007034 <xTaskPriorityInherit+0xd8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d903      	bls.n	8006fe0 <xTaskPriorityInherit+0x84>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <xTaskPriorityInherit+0xd8>)
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4a10      	ldr	r2, [pc, #64]	; (8007030 <xTaskPriorityInherit+0xd4>)
 8006fee:	441a      	add	r2, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fd ff0f 	bl	8004e1a <vListInsertEnd>
 8006ffc:	e004      	b.n	8007008 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	; (800702c <xTaskPriorityInherit+0xd0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e008      	b.n	8007020 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <xTaskPriorityInherit+0xd0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	429a      	cmp	r2, r3
 800701a:	d201      	bcs.n	8007020 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007020:	68fb      	ldr	r3, [r7, #12]
	}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2001b85c 	.word	0x2001b85c
 8007030:	2001b860 	.word	0x2001b860
 8007034:	2001bd38 	.word	0x2001bd38

08007038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d054      	beq.n	80070f8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800704e:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <xTaskPriorityDisinherit+0xcc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	d009      	beq.n	800706c <xTaskPriorityDisinherit+0x34>
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e7fe      	b.n	800706a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <xTaskPriorityDisinherit+0x50>
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	e7fe      	b.n	8007086 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	429a      	cmp	r2, r3
 800709c:	d02c      	beq.n	80070f8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d128      	bne.n	80070f8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fd ff12 	bl	8004ed4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <xTaskPriorityDisinherit+0xd0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d903      	bls.n	80070d8 <xTaskPriorityDisinherit+0xa0>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <xTaskPriorityDisinherit+0xd0>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a09      	ldr	r2, [pc, #36]	; (800710c <xTaskPriorityDisinherit+0xd4>)
 80070e6:	441a      	add	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fd fe93 	bl	8004e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f8:	697b      	ldr	r3, [r7, #20]
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	2001b85c 	.word	0x2001b85c
 8007108:	2001bd38 	.word	0x2001bd38
 800710c:	2001b860 	.word	0x2001b860

08007110 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800711e:	2301      	movs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d06d      	beq.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e7fe      	b.n	8007142 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d902      	bls.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e002      	b.n	800715a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	429a      	cmp	r2, r3
 8007162:	d04f      	beq.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d14a      	bne.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800716e:	4b27      	ldr	r3, [pc, #156]	; (800720c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	429a      	cmp	r2, r3
 8007176:	d109      	bne.n	800718c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	e7fe      	b.n	800718a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	db04      	blt.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	6959      	ldr	r1, [r3, #20]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071ba:	4413      	add	r3, r2
 80071bc:	4299      	cmp	r1, r3
 80071be:	d101      	bne.n	80071c4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01c      	beq.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fd fe80 	bl	8004ed4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d903      	bls.n	80071e8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4a06      	ldr	r2, [pc, #24]	; (8007210 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071f6:	441a      	add	r2, r3
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7fd fe0b 	bl	8004e1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007204:	bf00      	nop
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	2001b85c 	.word	0x2001b85c
 8007210:	2001b860 	.word	0x2001b860
 8007214:	2001bd38 	.word	0x2001bd38

08007218 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800721c:	4b07      	ldr	r3, [pc, #28]	; (800723c <pvTaskIncrementMutexHeldCount+0x24>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <pvTaskIncrementMutexHeldCount+0x24>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800722a:	3201      	adds	r2, #1
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <pvTaskIncrementMutexHeldCount+0x24>)
 8007230:	681b      	ldr	r3, [r3, #0]
	}
 8007232:	4618      	mov	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2001b85c 	.word	0x2001b85c

08007240 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800724a:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3304      	adds	r3, #4
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd fe3c 	bl	8004ed4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d10a      	bne.n	800727a <prvAddCurrentTaskToDelayedList+0x3a>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4819      	ldr	r0, [pc, #100]	; (80072d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007274:	f7fd fdd1 	bl	8004e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007278:	e026      	b.n	80072c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	429a      	cmp	r2, r3
 8007290:	d209      	bcs.n	80072a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd fddf 	bl	8004e62 <vListInsert>
}
 80072a4:	e010      	b.n	80072c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a6:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fd fdd5 	bl	8004e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d202      	bcs.n	80072c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072c2:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6013      	str	r3, [r2, #0]
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	2001bd34 	.word	0x2001bd34
 80072d4:	2001b85c 	.word	0x2001b85c
 80072d8:	2001bd1c 	.word	0x2001bd1c
 80072dc:	2001bcec 	.word	0x2001bcec
 80072e0:	2001bce8 	.word	0x2001bce8
 80072e4:	2001bd50 	.word	0x2001bd50

080072e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072f2:	f000 fac3 	bl	800787c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072f6:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <xTimerCreateTimerTask+0x80>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d021      	beq.n	8007342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007306:	1d3a      	adds	r2, r7, #4
 8007308:	f107 0108 	add.w	r1, r7, #8
 800730c:	f107 030c 	add.w	r3, r7, #12
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fb63 	bl	80049dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	9202      	str	r2, [sp, #8]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	2302      	movs	r3, #2
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	460a      	mov	r2, r1
 8007328:	4910      	ldr	r1, [pc, #64]	; (800736c <xTimerCreateTimerTask+0x84>)
 800732a:	4811      	ldr	r0, [pc, #68]	; (8007370 <xTimerCreateTimerTask+0x88>)
 800732c:	f7fe ffee 	bl	800630c <xTaskCreateStatic>
 8007330:	4602      	mov	r2, r0
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <xTimerCreateTimerTask+0x8c>)
 8007334:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <xTimerCreateTimerTask+0x8c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800733e:	2301      	movs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <xTimerCreateTimerTask+0x74>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	e7fe      	b.n	800735a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800735c:	697b      	ldr	r3, [r7, #20]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	2001bd8c 	.word	0x2001bd8c
 800736c:	080083ac 	.word	0x080083ac
 8007370:	08007491 	.word	0x08007491
 8007374:	2001bd90 	.word	0x2001bd90

08007378 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	; 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <xTimerGenericCommand+0x2c>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	e7fe      	b.n	80073a2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <xTimerGenericCommand+0x94>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d02a      	beq.n	8007402 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	dc18      	bgt.n	80073f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073be:	f7ff fdaf 	bl	8006f20 <xTaskGetSchedulerState>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d109      	bne.n	80073dc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073c8:	4b10      	ldr	r3, [pc, #64]	; (800740c <xTimerGenericCommand+0x94>)
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	f107 0110 	add.w	r1, r7, #16
 80073d0:	2300      	movs	r3, #0
 80073d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d4:	f7fe f9da 	bl	800578c <xQueueGenericSend>
 80073d8:	6278      	str	r0, [r7, #36]	; 0x24
 80073da:	e012      	b.n	8007402 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <xTimerGenericCommand+0x94>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	f107 0110 	add.w	r1, r7, #16
 80073e4:	2300      	movs	r3, #0
 80073e6:	2200      	movs	r2, #0
 80073e8:	f7fe f9d0 	bl	800578c <xQueueGenericSend>
 80073ec:	6278      	str	r0, [r7, #36]	; 0x24
 80073ee:	e008      	b.n	8007402 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073f0:	4b06      	ldr	r3, [pc, #24]	; (800740c <xTimerGenericCommand+0x94>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	f107 0110 	add.w	r1, r7, #16
 80073f8:	2300      	movs	r3, #0
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	f7fe fac0 	bl	8005980 <xQueueGenericSendFromISR>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	2001bd8c 	.word	0x2001bd8c

08007410 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800741a:	4b1c      	ldr	r3, [pc, #112]	; (800748c <prvProcessExpiredTimer+0x7c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fd fd53 	bl	8004ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d121      	bne.n	800747a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	18d1      	adds	r1, r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f000 f8c8 	bl	80075d8 <prvInsertTimerInActiveList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d015      	beq.n	800747a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800744e:	2300      	movs	r3, #0
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	2300      	movs	r3, #0
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	2100      	movs	r1, #0
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	f7ff ff8d 	bl	8007378 <xTimerGenericCommand>
 800745e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <prvProcessExpiredTimer+0x6a>
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e7fe      	b.n	8007478 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	6978      	ldr	r0, [r7, #20]
 8007480:	4798      	blx	r3
}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	2001bd84 	.word	0x2001bd84

08007490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007498:	f107 0308 	add.w	r3, r7, #8
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f857 	bl	8007550 <prvGetNextExpireTime>
 80074a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4619      	mov	r1, r3
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f803 	bl	80074b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074ae:	f000 f8d5 	bl	800765c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074b2:	e7f1      	b.n	8007498 <prvTimerTask+0x8>

080074b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074be:	f7ff f951 	bl	8006764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f866 	bl	8007598 <prvSampleTimeNow>
 80074cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d130      	bne.n	8007536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <prvProcessTimerOrBlockTask+0x3c>
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d806      	bhi.n	80074f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074e2:	f7ff f94d 	bl	8006780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff ff91 	bl	8007410 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074ee:	e024      	b.n	800753a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <prvProcessTimerOrBlockTask+0x90>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <prvProcessTimerOrBlockTask+0x94>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fec5 	bl	80062a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800751a:	f7ff f931 	bl	8006780 <xTaskResumeAll>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <prvProcessTimerOrBlockTask+0x98>)
 8007526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	f3bf 8f6f 	isb	sy
}
 8007534:	e001      	b.n	800753a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007536:	f7ff f923 	bl	8006780 <xTaskResumeAll>
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	2001bd88 	.word	0x2001bd88
 8007548:	2001bd8c 	.word	0x2001bd8c
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007558:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <prvGetNextExpireTime+0x44>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007576:	4b07      	ldr	r3, [pc, #28]	; (8007594 <prvGetNextExpireTime+0x44>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e001      	b.n	8007586 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007586:	68fb      	ldr	r3, [r7, #12]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	2001bd84 	.word	0x2001bd84

08007598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075a0:	f7ff f98a 	bl	80068b8 <xTaskGetTickCount>
 80075a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <prvSampleTimeNow+0x3c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d205      	bcs.n	80075bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075b0:	f000 f904 	bl	80077bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	e002      	b.n	80075c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075c2:	4a04      	ldr	r2, [pc, #16]	; (80075d4 <prvSampleTimeNow+0x3c>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075c8:	68fb      	ldr	r3, [r7, #12]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	2001bd94 	.word	0x2001bd94

080075d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d812      	bhi.n	8007624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800760c:	2301      	movs	r3, #1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	e01b      	b.n	800764a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <prvInsertTimerInActiveList+0x7c>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f7fd fc20 	bl	8004e62 <vListInsert>
 8007622:	e012      	b.n	800764a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d206      	bcs.n	800763a <prvInsertTimerInActiveList+0x62>
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d302      	bcc.n	800763a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007634:	2301      	movs	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e007      	b.n	800764a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <prvInsertTimerInActiveList+0x80>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3304      	adds	r3, #4
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7fd fc0c 	bl	8004e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800764a:	697b      	ldr	r3, [r7, #20]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	2001bd88 	.word	0x2001bd88
 8007658:	2001bd84 	.word	0x2001bd84

0800765c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08e      	sub	sp, #56	; 0x38
 8007660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007662:	e099      	b.n	8007798 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	da17      	bge.n	800769a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800766a:	1d3b      	adds	r3, r7, #4
 800766c:	3304      	adds	r3, #4
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <prvProcessReceivedCommands+0x2e>
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	e7fe      	b.n	8007688 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007690:	6850      	ldr	r0, [r2, #4]
 8007692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007694:	6892      	ldr	r2, [r2, #8]
 8007696:	4611      	mov	r1, r2
 8007698:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	db7a      	blt.n	8007796 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fd fc0f 	bl	8004ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b6:	463b      	mov	r3, r7
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ff6d 	bl	8007598 <prvSampleTimeNow>
 80076be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	d868      	bhi.n	8007798 <prvProcessReceivedCommands+0x13c>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <prvProcessReceivedCommands+0x70>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076f5 	.word	0x080076f5
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	08007799 	.word	0x08007799
 80076dc:	0800774f 	.word	0x0800774f
 80076e0:	08007785 	.word	0x08007785
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	080076f5 	.word	0x080076f5
 80076ec:	08007799 	.word	0x08007799
 80076f0:	0800774f 	.word	0x0800774f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	18d1      	adds	r1, r2, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007702:	f7ff ff69 	bl	80075d8 <prvInsertTimerInActiveList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d045      	beq.n	8007798 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007712:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d13d      	bne.n	8007798 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	441a      	add	r2, r3
 8007724:	2300      	movs	r3, #0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	2100      	movs	r1, #0
 800772c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772e:	f7ff fe23 	bl	8007378 <xTimerGenericCommand>
 8007732:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d12e      	bne.n	8007798 <prvProcessReceivedCommands+0x13c>
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e7fe      	b.n	800774c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <prvProcessReceivedCommands+0x114>
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	e7fe      	b.n	800776e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	18d1      	adds	r1, r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800777e:	f7ff ff2b 	bl	80075d8 <prvInsertTimerInActiveList>
					break;
 8007782:	e009      	b.n	8007798 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d104      	bne.n	8007798 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800778e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007790:	f7fd fa00 	bl	8004b94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007794:	e000      	b.n	8007798 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007796:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <prvProcessReceivedCommands+0x15c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1d39      	adds	r1, r7, #4
 800779e:	2200      	movs	r2, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe f981 	bl	8005aa8 <xQueueReceive>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f af5b 	bne.w	8007664 <prvProcessReceivedCommands+0x8>
	}
}
 80077ae:	bf00      	nop
 80077b0:	3730      	adds	r7, #48	; 0x30
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	2001bd8c 	.word	0x2001bd8c

080077bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077c2:	e044      	b.n	800784e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077c4:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <prvSwitchTimerLists+0xb8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077ce:	4b29      	ldr	r3, [pc, #164]	; (8007874 <prvSwitchTimerLists+0xb8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fd fb79 	bl	8004ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d12d      	bne.n	800784e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4413      	add	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	429a      	cmp	r2, r3
 8007802:	d90e      	bls.n	8007822 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007810:	4b18      	ldr	r3, [pc, #96]	; (8007874 <prvSwitchTimerLists+0xb8>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fd fb21 	bl	8004e62 <vListInsert>
 8007820:	e015      	b.n	800784e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff fda3 	bl	8007378 <xTimerGenericCommand>
 8007832:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <prvSwitchTimerLists+0x92>
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	e7fe      	b.n	800784c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <prvSwitchTimerLists+0xb8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1b5      	bne.n	80077c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <prvSwitchTimerLists+0xb8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800785e:	4b06      	ldr	r3, [pc, #24]	; (8007878 <prvSwitchTimerLists+0xbc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a04      	ldr	r2, [pc, #16]	; (8007874 <prvSwitchTimerLists+0xb8>)
 8007864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <prvSwitchTimerLists+0xbc>)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	6013      	str	r3, [r2, #0]
}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	2001bd84 	.word	0x2001bd84
 8007878:	2001bd88 	.word	0x2001bd88

0800787c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007882:	f7fd fc7b 	bl	800517c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d120      	bne.n	80078d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800788e:	4814      	ldr	r0, [pc, #80]	; (80078e0 <prvCheckForValidListAndQueue+0x64>)
 8007890:	f7fd fa96 	bl	8004dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007894:	4813      	ldr	r0, [pc, #76]	; (80078e4 <prvCheckForValidListAndQueue+0x68>)
 8007896:	f7fd fa93 	bl	8004dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <prvCheckForValidListAndQueue+0x6c>)
 800789c:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <prvCheckForValidListAndQueue+0x64>)
 800789e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvCheckForValidListAndQueue+0x70>)
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <prvCheckForValidListAndQueue+0x68>)
 80078a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <prvCheckForValidListAndQueue+0x74>)
 80078ac:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <prvCheckForValidListAndQueue+0x78>)
 80078ae:	2110      	movs	r1, #16
 80078b0:	200a      	movs	r0, #10
 80078b2:	f7fd fde5 	bl	8005480 <xQueueGenericCreateStatic>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	490b      	ldr	r1, [pc, #44]	; (80078f8 <prvCheckForValidListAndQueue+0x7c>)
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fc98 	bl	8006200 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f7fd fc82 	bl	80051d8 <vPortExitCritical>
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	2001bd8c 	.word	0x2001bd8c
 80078e0:	2001bd5c 	.word	0x2001bd5c
 80078e4:	2001bd70 	.word	0x2001bd70
 80078e8:	2001bd84 	.word	0x2001bd84
 80078ec:	2001bd88 	.word	0x2001bd88
 80078f0:	2001be38 	.word	0x2001be38
 80078f4:	2001bd98 	.word	0x2001bd98
 80078f8:	080083b4 	.word	0x080083b4

080078fc <__errno>:
 80078fc:	4b01      	ldr	r3, [pc, #4]	; (8007904 <__errno+0x8>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000010 	.word	0x20000010

08007908 <__libc_init_array>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4e0d      	ldr	r6, [pc, #52]	; (8007940 <__libc_init_array+0x38>)
 800790c:	4c0d      	ldr	r4, [pc, #52]	; (8007944 <__libc_init_array+0x3c>)
 800790e:	1ba4      	subs	r4, r4, r6
 8007910:	10a4      	asrs	r4, r4, #2
 8007912:	2500      	movs	r5, #0
 8007914:	42a5      	cmp	r5, r4
 8007916:	d109      	bne.n	800792c <__libc_init_array+0x24>
 8007918:	4e0b      	ldr	r6, [pc, #44]	; (8007948 <__libc_init_array+0x40>)
 800791a:	4c0c      	ldr	r4, [pc, #48]	; (800794c <__libc_init_array+0x44>)
 800791c:	f000 fd0c 	bl	8008338 <_init>
 8007920:	1ba4      	subs	r4, r4, r6
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	2500      	movs	r5, #0
 8007926:	42a5      	cmp	r5, r4
 8007928:	d105      	bne.n	8007936 <__libc_init_array+0x2e>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007930:	4798      	blx	r3
 8007932:	3501      	adds	r5, #1
 8007934:	e7ee      	b.n	8007914 <__libc_init_array+0xc>
 8007936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800793a:	4798      	blx	r3
 800793c:	3501      	adds	r5, #1
 800793e:	e7f2      	b.n	8007926 <__libc_init_array+0x1e>
 8007940:	080085d8 	.word	0x080085d8
 8007944:	080085d8 	.word	0x080085d8
 8007948:	080085d8 	.word	0x080085d8
 800794c:	080085dc 	.word	0x080085dc

08007950 <memcpy>:
 8007950:	b510      	push	{r4, lr}
 8007952:	1e43      	subs	r3, r0, #1
 8007954:	440a      	add	r2, r1
 8007956:	4291      	cmp	r1, r2
 8007958:	d100      	bne.n	800795c <memcpy+0xc>
 800795a:	bd10      	pop	{r4, pc}
 800795c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007964:	e7f7      	b.n	8007956 <memcpy+0x6>

08007966 <memset>:
 8007966:	4402      	add	r2, r0
 8007968:	4603      	mov	r3, r0
 800796a:	4293      	cmp	r3, r2
 800796c:	d100      	bne.n	8007970 <memset+0xa>
 800796e:	4770      	bx	lr
 8007970:	f803 1b01 	strb.w	r1, [r3], #1
 8007974:	e7f9      	b.n	800796a <memset+0x4>
	...

08007978 <_puts_r>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	460e      	mov	r6, r1
 800797c:	4605      	mov	r5, r0
 800797e:	b118      	cbz	r0, 8007988 <_puts_r+0x10>
 8007980:	6983      	ldr	r3, [r0, #24]
 8007982:	b90b      	cbnz	r3, 8007988 <_puts_r+0x10>
 8007984:	f000 fa58 	bl	8007e38 <__sinit>
 8007988:	69ab      	ldr	r3, [r5, #24]
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	b913      	cbnz	r3, 8007994 <_puts_r+0x1c>
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fa52 	bl	8007e38 <__sinit>
 8007994:	4b23      	ldr	r3, [pc, #140]	; (8007a24 <_puts_r+0xac>)
 8007996:	429c      	cmp	r4, r3
 8007998:	d117      	bne.n	80079ca <_puts_r+0x52>
 800799a:	686c      	ldr	r4, [r5, #4]
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	071b      	lsls	r3, r3, #28
 80079a0:	d51d      	bpl.n	80079de <_puts_r+0x66>
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	b1db      	cbz	r3, 80079de <_puts_r+0x66>
 80079a6:	3e01      	subs	r6, #1
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079ae:	3b01      	subs	r3, #1
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	b9e9      	cbnz	r1, 80079f0 <_puts_r+0x78>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da2e      	bge.n	8007a16 <_puts_r+0x9e>
 80079b8:	4622      	mov	r2, r4
 80079ba:	210a      	movs	r1, #10
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 f88b 	bl	8007ad8 <__swbuf_r>
 80079c2:	3001      	adds	r0, #1
 80079c4:	d011      	beq.n	80079ea <_puts_r+0x72>
 80079c6:	200a      	movs	r0, #10
 80079c8:	e011      	b.n	80079ee <_puts_r+0x76>
 80079ca:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <_puts_r+0xb0>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d101      	bne.n	80079d4 <_puts_r+0x5c>
 80079d0:	68ac      	ldr	r4, [r5, #8]
 80079d2:	e7e3      	b.n	800799c <_puts_r+0x24>
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <_puts_r+0xb4>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	bf08      	it	eq
 80079da:	68ec      	ldreq	r4, [r5, #12]
 80079dc:	e7de      	b.n	800799c <_puts_r+0x24>
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f8cb 	bl	8007b7c <__swsetup_r>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0dd      	beq.n	80079a6 <_puts_r+0x2e>
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da04      	bge.n	80079fe <_puts_r+0x86>
 80079f4:	69a2      	ldr	r2, [r4, #24]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	dc06      	bgt.n	8007a08 <_puts_r+0x90>
 80079fa:	290a      	cmp	r1, #10
 80079fc:	d004      	beq.n	8007a08 <_puts_r+0x90>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	7019      	strb	r1, [r3, #0]
 8007a06:	e7cf      	b.n	80079a8 <_puts_r+0x30>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 f864 	bl	8007ad8 <__swbuf_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1c9      	bne.n	80079a8 <_puts_r+0x30>
 8007a14:	e7e9      	b.n	80079ea <_puts_r+0x72>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	200a      	movs	r0, #10
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	6022      	str	r2, [r4, #0]
 8007a1e:	7018      	strb	r0, [r3, #0]
 8007a20:	e7e5      	b.n	80079ee <_puts_r+0x76>
 8007a22:	bf00      	nop
 8007a24:	08008484 	.word	0x08008484
 8007a28:	080084a4 	.word	0x080084a4
 8007a2c:	08008464 	.word	0x08008464

08007a30 <puts>:
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <puts+0xc>)
 8007a32:	4601      	mov	r1, r0
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	f7ff bf9f 	b.w	8007978 <_puts_r>
 8007a3a:	bf00      	nop
 8007a3c:	20000010 	.word	0x20000010

08007a40 <strcat>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4603      	mov	r3, r0
 8007a44:	781a      	ldrb	r2, [r3, #0]
 8007a46:	1c5c      	adds	r4, r3, #1
 8007a48:	b93a      	cbnz	r2, 8007a5a <strcat+0x1a>
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	d1f9      	bne.n	8007a4c <strcat+0xc>
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	e7f2      	b.n	8007a44 <strcat+0x4>

08007a5e <strchr>:
 8007a5e:	b2c9      	uxtb	r1, r1
 8007a60:	4603      	mov	r3, r0
 8007a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a66:	b11a      	cbz	r2, 8007a70 <strchr+0x12>
 8007a68:	428a      	cmp	r2, r1
 8007a6a:	d1f9      	bne.n	8007a60 <strchr+0x2>
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	4770      	bx	lr
 8007a70:	2900      	cmp	r1, #0
 8007a72:	bf18      	it	ne
 8007a74:	2300      	movne	r3, #0
 8007a76:	e7f9      	b.n	8007a6c <strchr+0xe>

08007a78 <strstr>:
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	7803      	ldrb	r3, [r0, #0]
 8007a7c:	b17b      	cbz	r3, 8007a9e <strstr+0x26>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	7823      	ldrb	r3, [r4, #0]
 8007a82:	4620      	mov	r0, r4
 8007a84:	1c66      	adds	r6, r4, #1
 8007a86:	b17b      	cbz	r3, 8007aa8 <strstr+0x30>
 8007a88:	1e4a      	subs	r2, r1, #1
 8007a8a:	1e63      	subs	r3, r4, #1
 8007a8c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007a90:	b14d      	cbz	r5, 8007aa6 <strstr+0x2e>
 8007a92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007a96:	42af      	cmp	r7, r5
 8007a98:	4634      	mov	r4, r6
 8007a9a:	d0f7      	beq.n	8007a8c <strstr+0x14>
 8007a9c:	e7f0      	b.n	8007a80 <strstr+0x8>
 8007a9e:	780b      	ldrb	r3, [r1, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf18      	it	ne
 8007aa4:	2000      	movne	r0, #0
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	e7fc      	b.n	8007aa6 <strstr+0x2e>

08007aac <strupr>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4606      	mov	r6, r0
 8007ab0:	1e45      	subs	r5, r0, #1
 8007ab2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8007ab6:	b90c      	cbnz	r4, 8007abc <strupr+0x10>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	f000 fa46 	bl	8007f4c <__locale_ctype_ptr>
 8007ac0:	4420      	add	r0, r4
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	7842      	ldrb	r2, [r0, #1]
 8007ac6:	f002 0203 	and.w	r2, r2, #3
 8007aca:	2a02      	cmp	r2, #2
 8007acc:	bf08      	it	eq
 8007ace:	f1a4 0320 	subeq.w	r3, r4, #32
 8007ad2:	702b      	strb	r3, [r5, #0]
 8007ad4:	e7ed      	b.n	8007ab2 <strupr+0x6>
	...

08007ad8 <__swbuf_r>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	460e      	mov	r6, r1
 8007adc:	4614      	mov	r4, r2
 8007ade:	4605      	mov	r5, r0
 8007ae0:	b118      	cbz	r0, 8007aea <__swbuf_r+0x12>
 8007ae2:	6983      	ldr	r3, [r0, #24]
 8007ae4:	b90b      	cbnz	r3, 8007aea <__swbuf_r+0x12>
 8007ae6:	f000 f9a7 	bl	8007e38 <__sinit>
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <__swbuf_r+0x98>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d12a      	bne.n	8007b46 <__swbuf_r+0x6e>
 8007af0:	686c      	ldr	r4, [r5, #4]
 8007af2:	69a3      	ldr	r3, [r4, #24]
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	071a      	lsls	r2, r3, #28
 8007afa:	d52e      	bpl.n	8007b5a <__swbuf_r+0x82>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	b363      	cbz	r3, 8007b5a <__swbuf_r+0x82>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	6820      	ldr	r0, [r4, #0]
 8007b04:	1ac0      	subs	r0, r0, r3
 8007b06:	6963      	ldr	r3, [r4, #20]
 8007b08:	b2f6      	uxtb	r6, r6
 8007b0a:	4283      	cmp	r3, r0
 8007b0c:	4637      	mov	r7, r6
 8007b0e:	dc04      	bgt.n	8007b1a <__swbuf_r+0x42>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f926 	bl	8007d64 <_fflush_r>
 8007b18:	bb28      	cbnz	r0, 8007b66 <__swbuf_r+0x8e>
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	60a3      	str	r3, [r4, #8]
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	701e      	strb	r6, [r3, #0]
 8007b28:	6963      	ldr	r3, [r4, #20]
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	4283      	cmp	r3, r0
 8007b2e:	d004      	beq.n	8007b3a <__swbuf_r+0x62>
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	07db      	lsls	r3, r3, #31
 8007b34:	d519      	bpl.n	8007b6a <__swbuf_r+0x92>
 8007b36:	2e0a      	cmp	r6, #10
 8007b38:	d117      	bne.n	8007b6a <__swbuf_r+0x92>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f911 	bl	8007d64 <_fflush_r>
 8007b42:	b190      	cbz	r0, 8007b6a <__swbuf_r+0x92>
 8007b44:	e00f      	b.n	8007b66 <__swbuf_r+0x8e>
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <__swbuf_r+0x9c>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	d101      	bne.n	8007b50 <__swbuf_r+0x78>
 8007b4c:	68ac      	ldr	r4, [r5, #8]
 8007b4e:	e7d0      	b.n	8007af2 <__swbuf_r+0x1a>
 8007b50:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <__swbuf_r+0xa0>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	bf08      	it	eq
 8007b56:	68ec      	ldreq	r4, [r5, #12]
 8007b58:	e7cb      	b.n	8007af2 <__swbuf_r+0x1a>
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 f80d 	bl	8007b7c <__swsetup_r>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0cc      	beq.n	8007b00 <__swbuf_r+0x28>
 8007b66:	f04f 37ff 	mov.w	r7, #4294967295
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	08008484 	.word	0x08008484
 8007b74:	080084a4 	.word	0x080084a4
 8007b78:	08008464 	.word	0x08008464

08007b7c <__swsetup_r>:
 8007b7c:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <__swsetup_r+0xcc>)
 8007b7e:	b570      	push	{r4, r5, r6, lr}
 8007b80:	681d      	ldr	r5, [r3, #0]
 8007b82:	4606      	mov	r6, r0
 8007b84:	460c      	mov	r4, r1
 8007b86:	b125      	cbz	r5, 8007b92 <__swsetup_r+0x16>
 8007b88:	69ab      	ldr	r3, [r5, #24]
 8007b8a:	b913      	cbnz	r3, 8007b92 <__swsetup_r+0x16>
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 f953 	bl	8007e38 <__sinit>
 8007b92:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <__swsetup_r+0xd0>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	d10f      	bne.n	8007bb8 <__swsetup_r+0x3c>
 8007b98:	686c      	ldr	r4, [r5, #4]
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	0715      	lsls	r5, r2, #28
 8007ba2:	d42c      	bmi.n	8007bfe <__swsetup_r+0x82>
 8007ba4:	06d0      	lsls	r0, r2, #27
 8007ba6:	d411      	bmi.n	8007bcc <__swsetup_r+0x50>
 8007ba8:	2209      	movs	r2, #9
 8007baa:	6032      	str	r2, [r6, #0]
 8007bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	e03e      	b.n	8007c36 <__swsetup_r+0xba>
 8007bb8:	4b25      	ldr	r3, [pc, #148]	; (8007c50 <__swsetup_r+0xd4>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d101      	bne.n	8007bc2 <__swsetup_r+0x46>
 8007bbe:	68ac      	ldr	r4, [r5, #8]
 8007bc0:	e7eb      	b.n	8007b9a <__swsetup_r+0x1e>
 8007bc2:	4b24      	ldr	r3, [pc, #144]	; (8007c54 <__swsetup_r+0xd8>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	bf08      	it	eq
 8007bc8:	68ec      	ldreq	r4, [r5, #12]
 8007bca:	e7e6      	b.n	8007b9a <__swsetup_r+0x1e>
 8007bcc:	0751      	lsls	r1, r2, #29
 8007bce:	d512      	bpl.n	8007bf6 <__swsetup_r+0x7a>
 8007bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd2:	b141      	cbz	r1, 8007be6 <__swsetup_r+0x6a>
 8007bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	d002      	beq.n	8007be2 <__swsetup_r+0x66>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 fa39 	bl	8008054 <_free_r>
 8007be2:	2300      	movs	r3, #0
 8007be4:	6363      	str	r3, [r4, #52]	; 0x34
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	6063      	str	r3, [r4, #4]
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f043 0308 	orr.w	r3, r3, #8
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	b94b      	cbnz	r3, 8007c16 <__swsetup_r+0x9a>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0c:	d003      	beq.n	8007c16 <__swsetup_r+0x9a>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f000 f9cd 	bl	8007fb0 <__smakebuf_r>
 8007c16:	89a2      	ldrh	r2, [r4, #12]
 8007c18:	f012 0301 	ands.w	r3, r2, #1
 8007c1c:	d00c      	beq.n	8007c38 <__swsetup_r+0xbc>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60a3      	str	r3, [r4, #8]
 8007c22:	6963      	ldr	r3, [r4, #20]
 8007c24:	425b      	negs	r3, r3
 8007c26:	61a3      	str	r3, [r4, #24]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	b953      	cbnz	r3, 8007c42 <__swsetup_r+0xc6>
 8007c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c34:	d1ba      	bne.n	8007bac <__swsetup_r+0x30>
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	0792      	lsls	r2, r2, #30
 8007c3a:	bf58      	it	pl
 8007c3c:	6963      	ldrpl	r3, [r4, #20]
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	e7f2      	b.n	8007c28 <__swsetup_r+0xac>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e7f7      	b.n	8007c36 <__swsetup_r+0xba>
 8007c46:	bf00      	nop
 8007c48:	20000010 	.word	0x20000010
 8007c4c:	08008484 	.word	0x08008484
 8007c50:	080084a4 	.word	0x080084a4
 8007c54:	08008464 	.word	0x08008464

08007c58 <__sflush_r>:
 8007c58:	898a      	ldrh	r2, [r1, #12]
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	0710      	lsls	r0, r2, #28
 8007c62:	460c      	mov	r4, r1
 8007c64:	d458      	bmi.n	8007d18 <__sflush_r+0xc0>
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc05      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d0f9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	d032      	beq.n	8007cf2 <__sflush_r+0x9a>
 8007c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	075a      	lsls	r2, r3, #29
 8007c92:	d505      	bpl.n	8007ca0 <__sflush_r+0x48>
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	1ac0      	subs	r0, r0, r3
 8007c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c9a:	b10b      	cbz	r3, 8007ca0 <__sflush_r+0x48>
 8007c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9e:	1ac0      	subs	r0, r0, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca6:	6a21      	ldr	r1, [r4, #32]
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b0      	blx	r6
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	d106      	bne.n	8007cc0 <__sflush_r+0x68>
 8007cb2:	6829      	ldr	r1, [r5, #0]
 8007cb4:	291d      	cmp	r1, #29
 8007cb6:	d848      	bhi.n	8007d4a <__sflush_r+0xf2>
 8007cb8:	4a29      	ldr	r2, [pc, #164]	; (8007d60 <__sflush_r+0x108>)
 8007cba:	40ca      	lsrs	r2, r1
 8007cbc:	07d6      	lsls	r6, r2, #31
 8007cbe:	d544      	bpl.n	8007d4a <__sflush_r+0xf2>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	6062      	str	r2, [r4, #4]
 8007cc4:	04d9      	lsls	r1, r3, #19
 8007cc6:	6922      	ldr	r2, [r4, #16]
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	d504      	bpl.n	8007cd6 <__sflush_r+0x7e>
 8007ccc:	1c42      	adds	r2, r0, #1
 8007cce:	d101      	bne.n	8007cd4 <__sflush_r+0x7c>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b903      	cbnz	r3, 8007cd6 <__sflush_r+0x7e>
 8007cd4:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd8:	602f      	str	r7, [r5, #0]
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d0c9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce2:	4299      	cmp	r1, r3
 8007ce4:	d002      	beq.n	8007cec <__sflush_r+0x94>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 f9b4 	bl	8008054 <_free_r>
 8007cec:	2000      	movs	r0, #0
 8007cee:	6360      	str	r0, [r4, #52]	; 0x34
 8007cf0:	e7c0      	b.n	8007c74 <__sflush_r+0x1c>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	1c41      	adds	r1, r0, #1
 8007cfa:	d1c8      	bne.n	8007c8e <__sflush_r+0x36>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c5      	beq.n	8007c8e <__sflush_r+0x36>
 8007d02:	2b1d      	cmp	r3, #29
 8007d04:	d001      	beq.n	8007d0a <__sflush_r+0xb2>
 8007d06:	2b16      	cmp	r3, #22
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0xb6>
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	e7b1      	b.n	8007c72 <__sflush_r+0x1a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e7ad      	b.n	8007c74 <__sflush_r+0x1c>
 8007d18:	690f      	ldr	r7, [r1, #16]
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d0a9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007d1e:	0793      	lsls	r3, r2, #30
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	bf08      	it	eq
 8007d24:	694b      	ldreq	r3, [r1, #20]
 8007d26:	600f      	str	r7, [r1, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	eba6 0807 	sub.w	r8, r6, r7
 8007d30:	608b      	str	r3, [r1, #8]
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	dd9c      	ble.n	8007c72 <__sflush_r+0x1a>
 8007d38:	4643      	mov	r3, r8
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	6a21      	ldr	r1, [r4, #32]
 8007d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc06      	bgt.n	8007d56 <__sflush_r+0xfe>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e78e      	b.n	8007c74 <__sflush_r+0x1c>
 8007d56:	4407      	add	r7, r0
 8007d58:	eba8 0800 	sub.w	r8, r8, r0
 8007d5c:	e7e9      	b.n	8007d32 <__sflush_r+0xda>
 8007d5e:	bf00      	nop
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b1db      	cbz	r3, 8007da6 <_fflush_r+0x42>
 8007d6e:	b118      	cbz	r0, 8007d78 <_fflush_r+0x14>
 8007d70:	6983      	ldr	r3, [r0, #24]
 8007d72:	b90b      	cbnz	r3, 8007d78 <_fflush_r+0x14>
 8007d74:	f000 f860 	bl	8007e38 <__sinit>
 8007d78:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <_fflush_r+0x48>)
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d109      	bne.n	8007d92 <_fflush_r+0x2e>
 8007d7e:	686c      	ldr	r4, [r5, #4]
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	b17b      	cbz	r3, 8007da6 <_fflush_r+0x42>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d8e:	f7ff bf63 	b.w	8007c58 <__sflush_r>
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <_fflush_r+0x4c>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d101      	bne.n	8007d9c <_fflush_r+0x38>
 8007d98:	68ac      	ldr	r4, [r5, #8]
 8007d9a:	e7f1      	b.n	8007d80 <_fflush_r+0x1c>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_fflush_r+0x50>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	bf08      	it	eq
 8007da2:	68ec      	ldreq	r4, [r5, #12]
 8007da4:	e7ec      	b.n	8007d80 <_fflush_r+0x1c>
 8007da6:	2000      	movs	r0, #0
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	bf00      	nop
 8007dac:	08008484 	.word	0x08008484
 8007db0:	080084a4 	.word	0x080084a4
 8007db4:	08008464 	.word	0x08008464

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	6083      	str	r3, [r0, #8]
 8007dc4:	8181      	strh	r1, [r0, #12]
 8007dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc8:	81c2      	strh	r2, [r0, #14]
 8007dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	; 0x5c
 8007dd6:	f7ff fdc6 	bl	8007966 <memset>
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x38>)
 8007ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x3c>)
 8007de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <std+0x40>)
 8007de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <std+0x44>)
 8007de8:	6224      	str	r4, [r4, #32]
 8007dea:	6323      	str	r3, [r4, #48]	; 0x30
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	080081c5 	.word	0x080081c5
 8007df4:	080081e7 	.word	0x080081e7
 8007df8:	0800821f 	.word	0x0800821f
 8007dfc:	08008243 	.word	0x08008243

08007e00 <_cleanup_r>:
 8007e00:	4901      	ldr	r1, [pc, #4]	; (8007e08 <_cleanup_r+0x8>)
 8007e02:	f000 b885 	b.w	8007f10 <_fwalk_reent>
 8007e06:	bf00      	nop
 8007e08:	08007d65 	.word	0x08007d65

08007e0c <__sfmoreglue>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	1e4a      	subs	r2, r1, #1
 8007e10:	2568      	movs	r5, #104	; 0x68
 8007e12:	4355      	muls	r5, r2
 8007e14:	460e      	mov	r6, r1
 8007e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e1a:	f000 f969 	bl	80080f0 <_malloc_r>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b140      	cbz	r0, 8007e34 <__sfmoreglue+0x28>
 8007e22:	2100      	movs	r1, #0
 8007e24:	e9c0 1600 	strd	r1, r6, [r0]
 8007e28:	300c      	adds	r0, #12
 8007e2a:	60a0      	str	r0, [r4, #8]
 8007e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e30:	f7ff fd99 	bl	8007966 <memset>
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}

08007e38 <__sinit>:
 8007e38:	6983      	ldr	r3, [r0, #24]
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	bb33      	cbnz	r3, 8007e8e <__sinit+0x56>
 8007e40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007e44:	6503      	str	r3, [r0, #80]	; 0x50
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <__sinit+0x58>)
 8007e48:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <__sinit+0x5c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6282      	str	r2, [r0, #40]	; 0x28
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	bf04      	itt	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	6183      	streq	r3, [r0, #24]
 8007e56:	f000 f81f 	bl	8007e98 <__sfp>
 8007e5a:	6060      	str	r0, [r4, #4]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f81b 	bl	8007e98 <__sfp>
 8007e62:	60a0      	str	r0, [r4, #8]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f817 	bl	8007e98 <__sfp>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60e0      	str	r0, [r4, #12]
 8007e6e:	2104      	movs	r1, #4
 8007e70:	6860      	ldr	r0, [r4, #4]
 8007e72:	f7ff ffa1 	bl	8007db8 <std>
 8007e76:	2201      	movs	r2, #1
 8007e78:	2109      	movs	r1, #9
 8007e7a:	68a0      	ldr	r0, [r4, #8]
 8007e7c:	f7ff ff9c 	bl	8007db8 <std>
 8007e80:	2202      	movs	r2, #2
 8007e82:	2112      	movs	r1, #18
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	f7ff ff97 	bl	8007db8 <std>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61a3      	str	r3, [r4, #24]
 8007e8e:	bd10      	pop	{r4, pc}
 8007e90:	08008460 	.word	0x08008460
 8007e94:	08007e01 	.word	0x08007e01

08007e98 <__sfp>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <__sfp+0x70>)
 8007e9c:	681e      	ldr	r6, [r3, #0]
 8007e9e:	69b3      	ldr	r3, [r6, #24]
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	b913      	cbnz	r3, 8007eaa <__sfp+0x12>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ffc7 	bl	8007e38 <__sinit>
 8007eaa:	3648      	adds	r6, #72	; 0x48
 8007eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	d503      	bpl.n	8007ebc <__sfp+0x24>
 8007eb4:	6833      	ldr	r3, [r6, #0]
 8007eb6:	b133      	cbz	r3, 8007ec6 <__sfp+0x2e>
 8007eb8:	6836      	ldr	r6, [r6, #0]
 8007eba:	e7f7      	b.n	8007eac <__sfp+0x14>
 8007ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec0:	b16d      	cbz	r5, 8007ede <__sfp+0x46>
 8007ec2:	3468      	adds	r4, #104	; 0x68
 8007ec4:	e7f4      	b.n	8007eb0 <__sfp+0x18>
 8007ec6:	2104      	movs	r1, #4
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff9f 	bl	8007e0c <__sfmoreglue>
 8007ece:	6030      	str	r0, [r6, #0]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1f1      	bne.n	8007eb8 <__sfp+0x20>
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	4620      	mov	r0, r4
 8007edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <__sfp+0x74>)
 8007ee0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee2:	e9c4 5500 	strd	r5, r5, [r4]
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007eec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ef8:	f7ff fd35 	bl	8007966 <memset>
 8007efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f04:	e7e9      	b.n	8007eda <__sfp+0x42>
 8007f06:	bf00      	nop
 8007f08:	08008460 	.word	0x08008460
 8007f0c:	ffff0001 	.word	0xffff0001

08007f10 <_fwalk_reent>:
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	4680      	mov	r8, r0
 8007f16:	4689      	mov	r9, r1
 8007f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	b914      	cbnz	r4, 8007f26 <_fwalk_reent+0x16>
 8007f20:	4630      	mov	r0, r6
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007f2a:	3f01      	subs	r7, #1
 8007f2c:	d501      	bpl.n	8007f32 <_fwalk_reent+0x22>
 8007f2e:	6824      	ldr	r4, [r4, #0]
 8007f30:	e7f5      	b.n	8007f1e <_fwalk_reent+0xe>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d907      	bls.n	8007f48 <_fwalk_reent+0x38>
 8007f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	d003      	beq.n	8007f48 <_fwalk_reent+0x38>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4640      	mov	r0, r8
 8007f44:	47c8      	blx	r9
 8007f46:	4306      	orrs	r6, r0
 8007f48:	3568      	adds	r5, #104	; 0x68
 8007f4a:	e7ee      	b.n	8007f2a <_fwalk_reent+0x1a>

08007f4c <__locale_ctype_ptr>:
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <__locale_ctype_ptr+0x14>)
 8007f4e:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <__locale_ctype_ptr+0x18>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bf08      	it	eq
 8007f58:	4613      	moveq	r3, r2
 8007f5a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007f5e:	4770      	bx	lr
 8007f60:	20000010 	.word	0x20000010
 8007f64:	20000074 	.word	0x20000074

08007f68 <__swhatbuf_r>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	b096      	sub	sp, #88	; 0x58
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	da07      	bge.n	8007f8a <__swhatbuf_r+0x22>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	89b3      	ldrh	r3, [r6, #12]
 8007f80:	061a      	lsls	r2, r3, #24
 8007f82:	d410      	bmi.n	8007fa6 <__swhatbuf_r+0x3e>
 8007f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f88:	e00e      	b.n	8007fa8 <__swhatbuf_r+0x40>
 8007f8a:	466a      	mov	r2, sp
 8007f8c:	f000 f98c 	bl	80082a8 <_fstat_r>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	dbf2      	blt.n	8007f7a <__swhatbuf_r+0x12>
 8007f94:	9a01      	ldr	r2, [sp, #4]
 8007f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f9e:	425a      	negs	r2, r3
 8007fa0:	415a      	adcs	r2, r3
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	e7ee      	b.n	8007f84 <__swhatbuf_r+0x1c>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	2000      	movs	r0, #0
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	b016      	add	sp, #88	; 0x58
 8007fae:	bd70      	pop	{r4, r5, r6, pc}

08007fb0 <__smakebuf_r>:
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb4:	079d      	lsls	r5, r3, #30
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	d507      	bpl.n	8007fcc <__smakebuf_r+0x1c>
 8007fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	ab01      	add	r3, sp, #4
 8007fce:	466a      	mov	r2, sp
 8007fd0:	f7ff ffca 	bl	8007f68 <__swhatbuf_r>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f889 	bl	80080f0 <_malloc_r>
 8007fde:	b948      	cbnz	r0, 8007ff4 <__smakebuf_r+0x44>
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d4ef      	bmi.n	8007fc8 <__smakebuf_r+0x18>
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	f043 0302 	orr.w	r3, r3, #2
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	e7e3      	b.n	8007fbc <__smakebuf_r+0xc>
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <__smakebuf_r+0x7c>)
 8007ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	6163      	str	r3, [r4, #20]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	6120      	str	r0, [r4, #16]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x74>
 800800c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f95b 	bl	80082cc <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x74>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	431d      	orrs	r5, r3
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cd      	b.n	8007fc8 <__smakebuf_r+0x18>
 800802c:	08007e01 	.word	0x08007e01

08008030 <__ascii_mbtowc>:
 8008030:	b082      	sub	sp, #8
 8008032:	b901      	cbnz	r1, 8008036 <__ascii_mbtowc+0x6>
 8008034:	a901      	add	r1, sp, #4
 8008036:	b142      	cbz	r2, 800804a <__ascii_mbtowc+0x1a>
 8008038:	b14b      	cbz	r3, 800804e <__ascii_mbtowc+0x1e>
 800803a:	7813      	ldrb	r3, [r2, #0]
 800803c:	600b      	str	r3, [r1, #0]
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	1c10      	adds	r0, r2, #0
 8008042:	bf18      	it	ne
 8008044:	2001      	movne	r0, #1
 8008046:	b002      	add	sp, #8
 8008048:	4770      	bx	lr
 800804a:	4610      	mov	r0, r2
 800804c:	e7fb      	b.n	8008046 <__ascii_mbtowc+0x16>
 800804e:	f06f 0001 	mvn.w	r0, #1
 8008052:	e7f8      	b.n	8008046 <__ascii_mbtowc+0x16>

08008054 <_free_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4605      	mov	r5, r0
 8008058:	2900      	cmp	r1, #0
 800805a:	d045      	beq.n	80080e8 <_free_r+0x94>
 800805c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008060:	1f0c      	subs	r4, r1, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	bfb8      	it	lt
 8008066:	18e4      	addlt	r4, r4, r3
 8008068:	f000 f952 	bl	8008310 <__malloc_lock>
 800806c:	4a1f      	ldr	r2, [pc, #124]	; (80080ec <_free_r+0x98>)
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	4610      	mov	r0, r2
 8008072:	b933      	cbnz	r3, 8008082 <_free_r+0x2e>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	4628      	mov	r0, r5
 800807a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800807e:	f000 b948 	b.w	8008312 <__malloc_unlock>
 8008082:	42a3      	cmp	r3, r4
 8008084:	d90c      	bls.n	80080a0 <_free_r+0x4c>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	1862      	adds	r2, r4, r1
 800808a:	4293      	cmp	r3, r2
 800808c:	bf04      	itt	eq
 800808e:	681a      	ldreq	r2, [r3, #0]
 8008090:	685b      	ldreq	r3, [r3, #4]
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	bf04      	itt	eq
 8008096:	1852      	addeq	r2, r2, r1
 8008098:	6022      	streq	r2, [r4, #0]
 800809a:	6004      	str	r4, [r0, #0]
 800809c:	e7ec      	b.n	8008078 <_free_r+0x24>
 800809e:	4613      	mov	r3, r2
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	b10a      	cbz	r2, 80080a8 <_free_r+0x54>
 80080a4:	42a2      	cmp	r2, r4
 80080a6:	d9fa      	bls.n	800809e <_free_r+0x4a>
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	1858      	adds	r0, r3, r1
 80080ac:	42a0      	cmp	r0, r4
 80080ae:	d10b      	bne.n	80080c8 <_free_r+0x74>
 80080b0:	6820      	ldr	r0, [r4, #0]
 80080b2:	4401      	add	r1, r0
 80080b4:	1858      	adds	r0, r3, r1
 80080b6:	4282      	cmp	r2, r0
 80080b8:	6019      	str	r1, [r3, #0]
 80080ba:	d1dd      	bne.n	8008078 <_free_r+0x24>
 80080bc:	6810      	ldr	r0, [r2, #0]
 80080be:	6852      	ldr	r2, [r2, #4]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	4401      	add	r1, r0
 80080c4:	6019      	str	r1, [r3, #0]
 80080c6:	e7d7      	b.n	8008078 <_free_r+0x24>
 80080c8:	d902      	bls.n	80080d0 <_free_r+0x7c>
 80080ca:	230c      	movs	r3, #12
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	e7d3      	b.n	8008078 <_free_r+0x24>
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	1821      	adds	r1, r4, r0
 80080d4:	428a      	cmp	r2, r1
 80080d6:	bf04      	itt	eq
 80080d8:	6811      	ldreq	r1, [r2, #0]
 80080da:	6852      	ldreq	r2, [r2, #4]
 80080dc:	6062      	str	r2, [r4, #4]
 80080de:	bf04      	itt	eq
 80080e0:	1809      	addeq	r1, r1, r0
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	605c      	str	r4, [r3, #4]
 80080e6:	e7c7      	b.n	8008078 <_free_r+0x24>
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	2001be88 	.word	0x2001be88

080080f0 <_malloc_r>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	1ccd      	adds	r5, r1, #3
 80080f4:	f025 0503 	bic.w	r5, r5, #3
 80080f8:	3508      	adds	r5, #8
 80080fa:	2d0c      	cmp	r5, #12
 80080fc:	bf38      	it	cc
 80080fe:	250c      	movcc	r5, #12
 8008100:	2d00      	cmp	r5, #0
 8008102:	4606      	mov	r6, r0
 8008104:	db01      	blt.n	800810a <_malloc_r+0x1a>
 8008106:	42a9      	cmp	r1, r5
 8008108:	d903      	bls.n	8008112 <_malloc_r+0x22>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	f000 f8fd 	bl	8008310 <__malloc_lock>
 8008116:	4a21      	ldr	r2, [pc, #132]	; (800819c <_malloc_r+0xac>)
 8008118:	6814      	ldr	r4, [r2, #0]
 800811a:	4621      	mov	r1, r4
 800811c:	b991      	cbnz	r1, 8008144 <_malloc_r+0x54>
 800811e:	4c20      	ldr	r4, [pc, #128]	; (80081a0 <_malloc_r+0xb0>)
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	b91b      	cbnz	r3, 800812c <_malloc_r+0x3c>
 8008124:	4630      	mov	r0, r6
 8008126:	f000 f83d 	bl	80081a4 <_sbrk_r>
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	4629      	mov	r1, r5
 800812e:	4630      	mov	r0, r6
 8008130:	f000 f838 	bl	80081a4 <_sbrk_r>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d124      	bne.n	8008182 <_malloc_r+0x92>
 8008138:	230c      	movs	r3, #12
 800813a:	6033      	str	r3, [r6, #0]
 800813c:	4630      	mov	r0, r6
 800813e:	f000 f8e8 	bl	8008312 <__malloc_unlock>
 8008142:	e7e4      	b.n	800810e <_malloc_r+0x1e>
 8008144:	680b      	ldr	r3, [r1, #0]
 8008146:	1b5b      	subs	r3, r3, r5
 8008148:	d418      	bmi.n	800817c <_malloc_r+0x8c>
 800814a:	2b0b      	cmp	r3, #11
 800814c:	d90f      	bls.n	800816e <_malloc_r+0x7e>
 800814e:	600b      	str	r3, [r1, #0]
 8008150:	50cd      	str	r5, [r1, r3]
 8008152:	18cc      	adds	r4, r1, r3
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f8dc 	bl	8008312 <__malloc_unlock>
 800815a:	f104 000b 	add.w	r0, r4, #11
 800815e:	1d23      	adds	r3, r4, #4
 8008160:	f020 0007 	bic.w	r0, r0, #7
 8008164:	1ac3      	subs	r3, r0, r3
 8008166:	d0d3      	beq.n	8008110 <_malloc_r+0x20>
 8008168:	425a      	negs	r2, r3
 800816a:	50e2      	str	r2, [r4, r3]
 800816c:	e7d0      	b.n	8008110 <_malloc_r+0x20>
 800816e:	428c      	cmp	r4, r1
 8008170:	684b      	ldr	r3, [r1, #4]
 8008172:	bf16      	itet	ne
 8008174:	6063      	strne	r3, [r4, #4]
 8008176:	6013      	streq	r3, [r2, #0]
 8008178:	460c      	movne	r4, r1
 800817a:	e7eb      	b.n	8008154 <_malloc_r+0x64>
 800817c:	460c      	mov	r4, r1
 800817e:	6849      	ldr	r1, [r1, #4]
 8008180:	e7cc      	b.n	800811c <_malloc_r+0x2c>
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d005      	beq.n	8008198 <_malloc_r+0xa8>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4630      	mov	r0, r6
 8008190:	f000 f808 	bl	80081a4 <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d0cf      	beq.n	8008138 <_malloc_r+0x48>
 8008198:	6025      	str	r5, [r4, #0]
 800819a:	e7db      	b.n	8008154 <_malloc_r+0x64>
 800819c:	2001be88 	.word	0x2001be88
 80081a0:	2001be8c 	.word	0x2001be8c

080081a4 <_sbrk_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4c06      	ldr	r4, [pc, #24]	; (80081c0 <_sbrk_r+0x1c>)
 80081a8:	2300      	movs	r3, #0
 80081aa:	4605      	mov	r5, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	f7f8 ff4e 	bl	8001050 <_sbrk>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_sbrk_r+0x1a>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	b103      	cbz	r3, 80081be <_sbrk_r+0x1a>
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	2001c020 	.word	0x2001c020

080081c4 <__sread>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	460c      	mov	r4, r1
 80081c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081cc:	f000 f8a2 	bl	8008314 <_read_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	bfab      	itete	ge
 80081d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081d6:	89a3      	ldrhlt	r3, [r4, #12]
 80081d8:	181b      	addge	r3, r3, r0
 80081da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081de:	bfac      	ite	ge
 80081e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081e2:	81a3      	strhlt	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__swrite>:
 80081e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ea:	461f      	mov	r7, r3
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	05db      	lsls	r3, r3, #23
 80081f0:	4605      	mov	r5, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4616      	mov	r6, r2
 80081f6:	d505      	bpl.n	8008204 <__swrite+0x1e>
 80081f8:	2302      	movs	r3, #2
 80081fa:	2200      	movs	r2, #0
 80081fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008200:	f000 f874 	bl	80082ec <_lseek_r>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800820a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	4632      	mov	r2, r6
 8008212:	463b      	mov	r3, r7
 8008214:	4628      	mov	r0, r5
 8008216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	f000 b823 	b.w	8008264 <_write_r>

0800821e <__sseek>:
 800821e:	b510      	push	{r4, lr}
 8008220:	460c      	mov	r4, r1
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 f861 	bl	80082ec <_lseek_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	bf15      	itete	ne
 8008230:	6560      	strne	r0, [r4, #84]	; 0x54
 8008232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800823a:	81a3      	strheq	r3, [r4, #12]
 800823c:	bf18      	it	ne
 800823e:	81a3      	strhne	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__sclose>:
 8008242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008246:	f000 b81f 	b.w	8008288 <_close_r>

0800824a <__ascii_wctomb>:
 800824a:	b149      	cbz	r1, 8008260 <__ascii_wctomb+0x16>
 800824c:	2aff      	cmp	r2, #255	; 0xff
 800824e:	bf85      	ittet	hi
 8008250:	238a      	movhi	r3, #138	; 0x8a
 8008252:	6003      	strhi	r3, [r0, #0]
 8008254:	700a      	strbls	r2, [r1, #0]
 8008256:	f04f 30ff 	movhi.w	r0, #4294967295
 800825a:	bf98      	it	ls
 800825c:	2001      	movls	r0, #1
 800825e:	4770      	bx	lr
 8008260:	4608      	mov	r0, r1
 8008262:	4770      	bx	lr

08008264 <_write_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4c07      	ldr	r4, [pc, #28]	; (8008284 <_write_r+0x20>)
 8008268:	4605      	mov	r5, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7f9 f84a 	bl	800130c <_write>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_write_r+0x1e>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	b103      	cbz	r3, 8008282 <_write_r+0x1e>
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	2001c020 	.word	0x2001c020

08008288 <_close_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4c06      	ldr	r4, [pc, #24]	; (80082a4 <_close_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4605      	mov	r5, r0
 8008290:	4608      	mov	r0, r1
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	f7f8 fea7 	bl	8000fe6 <_close>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_close_r+0x1a>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_close_r+0x1a>
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	2001c020 	.word	0x2001c020

080082a8 <_fstat_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4c07      	ldr	r4, [pc, #28]	; (80082c8 <_fstat_r+0x20>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4605      	mov	r5, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	f7f8 fea2 	bl	8000ffe <_fstat>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d102      	bne.n	80082c4 <_fstat_r+0x1c>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	b103      	cbz	r3, 80082c4 <_fstat_r+0x1c>
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	bf00      	nop
 80082c8:	2001c020 	.word	0x2001c020

080082cc <_isatty_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4c06      	ldr	r4, [pc, #24]	; (80082e8 <_isatty_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4605      	mov	r5, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	f7f8 fea1 	bl	800101e <_isatty>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_isatty_r+0x1a>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_isatty_r+0x1a>
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	2001c020 	.word	0x2001c020

080082ec <_lseek_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4c07      	ldr	r4, [pc, #28]	; (800830c <_lseek_r+0x20>)
 80082f0:	4605      	mov	r5, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7f8 fe9a 	bl	8001034 <_lseek>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_lseek_r+0x1e>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	b103      	cbz	r3, 800830a <_lseek_r+0x1e>
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	2001c020 	.word	0x2001c020

08008310 <__malloc_lock>:
 8008310:	4770      	bx	lr

08008312 <__malloc_unlock>:
 8008312:	4770      	bx	lr

08008314 <_read_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4c07      	ldr	r4, [pc, #28]	; (8008334 <_read_r+0x20>)
 8008318:	4605      	mov	r5, r0
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	2200      	movs	r2, #0
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f7f8 fe42 	bl	8000fac <_read>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_read_r+0x1e>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	b103      	cbz	r3, 8008332 <_read_r+0x1e>
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	2001c020 	.word	0x2001c020

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
